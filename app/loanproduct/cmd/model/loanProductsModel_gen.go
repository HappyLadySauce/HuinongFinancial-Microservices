// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	loanProductsFieldNames          = builder.RawFieldNames(&LoanProducts{})
	loanProductsRows                = strings.Join(loanProductsFieldNames, ",")
	loanProductsRowsExpectAutoSet   = strings.Join(stringx.Remove(loanProductsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	loanProductsRowsWithPlaceHolder = strings.Join(stringx.Remove(loanProductsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheLoanProductsIdPrefix          = "cache:loanProducts:id:"
	cacheLoanProductsProductCodePrefix = "cache:loanProducts:productCode:"
)

type (
	loanProductsModel interface {
		Insert(ctx context.Context, data *LoanProducts) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*LoanProducts, error)
		FindOneByProductCode(ctx context.Context, productCode string) (*LoanProducts, error)
		Update(ctx context.Context, data *LoanProducts) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultLoanProductsModel struct {
		sqlc.CachedConn
		table string
	}

	LoanProducts struct {
		Id           uint64    `db:"id"`            // 产品ID
		ProductCode  string    `db:"product_code"`  // 产品编码
		Name         string    `db:"name"`          // 产品名称
		Type         string    `db:"type"`          // 产品类型
		MaxAmount    float64   `db:"max_amount"`    // 最大金额
		MinAmount    float64   `db:"min_amount"`    // 最小金额
		MaxDuration  uint64    `db:"max_duration"`  // 最大期限(月)
		MinDuration  uint64    `db:"min_duration"`  // 最小期限(月)
		InterestRate float64   `db:"interest_rate"` // 年利率(%)
		Description  string    `db:"description"`   // 产品描述
		Status       uint64    `db:"status"`        // 状态 1:上架 2:下架
		CreatedAt    time.Time `db:"created_at"`    // 创建时间
		UpdatedAt    time.Time `db:"updated_at"`    // 更新时间
	}
)

func newLoanProductsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultLoanProductsModel {
	return &defaultLoanProductsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`loan_products`",
	}
}

func (m *defaultLoanProductsModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	loanProductsIdKey := fmt.Sprintf("%s%v", cacheLoanProductsIdPrefix, id)
	loanProductsProductCodeKey := fmt.Sprintf("%s%v", cacheLoanProductsProductCodePrefix, data.ProductCode)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, loanProductsIdKey, loanProductsProductCodeKey)
	return err
}

func (m *defaultLoanProductsModel) FindOne(ctx context.Context, id uint64) (*LoanProducts, error) {
	loanProductsIdKey := fmt.Sprintf("%s%v", cacheLoanProductsIdPrefix, id)
	var resp LoanProducts
	err := m.QueryRowCtx(ctx, &resp, loanProductsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", loanProductsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLoanProductsModel) FindOneByProductCode(ctx context.Context, productCode string) (*LoanProducts, error) {
	loanProductsProductCodeKey := fmt.Sprintf("%s%v", cacheLoanProductsProductCodePrefix, productCode)
	var resp LoanProducts
	err := m.QueryRowIndexCtx(ctx, &resp, loanProductsProductCodeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `product_code` = ? limit 1", loanProductsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, productCode); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLoanProductsModel) Insert(ctx context.Context, data *LoanProducts) (sql.Result, error) {
	loanProductsIdKey := fmt.Sprintf("%s%v", cacheLoanProductsIdPrefix, data.Id)
	loanProductsProductCodeKey := fmt.Sprintf("%s%v", cacheLoanProductsProductCodePrefix, data.ProductCode)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, loanProductsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ProductCode, data.Name, data.Type, data.MaxAmount, data.MinAmount, data.MaxDuration, data.MinDuration, data.InterestRate, data.Description, data.Status)
	}, loanProductsIdKey, loanProductsProductCodeKey)
	return ret, err
}

func (m *defaultLoanProductsModel) Update(ctx context.Context, newData *LoanProducts) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	loanProductsIdKey := fmt.Sprintf("%s%v", cacheLoanProductsIdPrefix, data.Id)
	loanProductsProductCodeKey := fmt.Sprintf("%s%v", cacheLoanProductsProductCodePrefix, data.ProductCode)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, loanProductsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.ProductCode, newData.Name, newData.Type, newData.MaxAmount, newData.MinAmount, newData.MaxDuration, newData.MinDuration, newData.InterestRate, newData.Description, newData.Status, newData.Id)
	}, loanProductsIdKey, loanProductsProductCodeKey)
	return err
}

func (m *defaultLoanProductsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheLoanProductsIdPrefix, primary)
}

func (m *defaultLoanProductsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", loanProductsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultLoanProductsModel) tableName() string {
	return m.table
}
