// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: lease-rpc.proto

package leaseclient

import (
	"context"

	"rpc/lease"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ApproveLeaseApplicationReq  = lease.ApproveLeaseApplicationReq
	ApproveLeaseApplicationResp = lease.ApproveLeaseApplicationResp
	CancelLeaseApplicationReq   = lease.CancelLeaseApplicationReq
	CancelLeaseApplicationResp  = lease.CancelLeaseApplicationResp
	CreateLeaseApplicationReq   = lease.CreateLeaseApplicationReq
	CreateLeaseApplicationResp  = lease.CreateLeaseApplicationResp
	GetLeaseApplicationReq      = lease.GetLeaseApplicationReq
	GetLeaseApplicationResp     = lease.GetLeaseApplicationResp
	LeaseApplicationInfo        = lease.LeaseApplicationInfo
	LeaseApprovalInfo           = lease.LeaseApprovalInfo
	ListLeaseApplicationsReq    = lease.ListLeaseApplicationsReq
	ListLeaseApplicationsResp   = lease.ListLeaseApplicationsResp
	ListLeaseApprovalsReq       = lease.ListLeaseApprovalsReq
	ListLeaseApprovalsResp      = lease.ListLeaseApprovalsResp
	UpdateLeaseApplicationReq   = lease.UpdateLeaseApplicationReq
	UpdateLeaseApplicationResp  = lease.UpdateLeaseApplicationResp

	Lease interface {
		// 租赁申请管理
		CreateLeaseApplication(ctx context.Context, in *CreateLeaseApplicationReq, opts ...grpc.CallOption) (*CreateLeaseApplicationResp, error)
		GetLeaseApplication(ctx context.Context, in *GetLeaseApplicationReq, opts ...grpc.CallOption) (*GetLeaseApplicationResp, error)
		ListLeaseApplications(ctx context.Context, in *ListLeaseApplicationsReq, opts ...grpc.CallOption) (*ListLeaseApplicationsResp, error)
		UpdateLeaseApplication(ctx context.Context, in *UpdateLeaseApplicationReq, opts ...grpc.CallOption) (*UpdateLeaseApplicationResp, error)
		CancelLeaseApplication(ctx context.Context, in *CancelLeaseApplicationReq, opts ...grpc.CallOption) (*CancelLeaseApplicationResp, error)
		// 租赁审批管理
		ApproveLeaseApplication(ctx context.Context, in *ApproveLeaseApplicationReq, opts ...grpc.CallOption) (*ApproveLeaseApplicationResp, error)
		ListLeaseApprovals(ctx context.Context, in *ListLeaseApprovalsReq, opts ...grpc.CallOption) (*ListLeaseApprovalsResp, error)
	}

	defaultLease struct {
		cli zrpc.Client
	}
)

func NewLease(cli zrpc.Client) Lease {
	return &defaultLease{
		cli: cli,
	}
}

// 租赁申请管理
func (m *defaultLease) CreateLeaseApplication(ctx context.Context, in *CreateLeaseApplicationReq, opts ...grpc.CallOption) (*CreateLeaseApplicationResp, error) {
	client := lease.NewLeaseClient(m.cli.Conn())
	return client.CreateLeaseApplication(ctx, in, opts...)
}

func (m *defaultLease) GetLeaseApplication(ctx context.Context, in *GetLeaseApplicationReq, opts ...grpc.CallOption) (*GetLeaseApplicationResp, error) {
	client := lease.NewLeaseClient(m.cli.Conn())
	return client.GetLeaseApplication(ctx, in, opts...)
}

func (m *defaultLease) ListLeaseApplications(ctx context.Context, in *ListLeaseApplicationsReq, opts ...grpc.CallOption) (*ListLeaseApplicationsResp, error) {
	client := lease.NewLeaseClient(m.cli.Conn())
	return client.ListLeaseApplications(ctx, in, opts...)
}

func (m *defaultLease) UpdateLeaseApplication(ctx context.Context, in *UpdateLeaseApplicationReq, opts ...grpc.CallOption) (*UpdateLeaseApplicationResp, error) {
	client := lease.NewLeaseClient(m.cli.Conn())
	return client.UpdateLeaseApplication(ctx, in, opts...)
}

func (m *defaultLease) CancelLeaseApplication(ctx context.Context, in *CancelLeaseApplicationReq, opts ...grpc.CallOption) (*CancelLeaseApplicationResp, error) {
	client := lease.NewLeaseClient(m.cli.Conn())
	return client.CancelLeaseApplication(ctx, in, opts...)
}

// 租赁审批管理
func (m *defaultLease) ApproveLeaseApplication(ctx context.Context, in *ApproveLeaseApplicationReq, opts ...grpc.CallOption) (*ApproveLeaseApplicationResp, error) {
	client := lease.NewLeaseClient(m.cli.Conn())
	return client.ApproveLeaseApplication(ctx, in, opts...)
}

func (m *defaultLease) ListLeaseApprovals(ctx context.Context, in *ListLeaseApprovalsReq, opts ...grpc.CallOption) (*ListLeaseApprovalsResp, error) {
	client := lease.NewLeaseClient(m.cli.Conn())
	return client.ListLeaseApprovals(ctx, in, opts...)
}
