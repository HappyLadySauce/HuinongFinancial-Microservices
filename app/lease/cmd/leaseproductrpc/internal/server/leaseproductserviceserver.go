// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: leaseproduct-rpc.proto

package server

import (
	"context"

	"leaseproductrpc/internal/logic"
	"leaseproductrpc/internal/svc"
	"leaseproductrpc/leaseproduct"
)

type LeaseProductServiceServer struct {
	svcCtx *svc.ServiceContext
	leaseproduct.UnimplementedLeaseProductServiceServer
}

func NewLeaseProductServiceServer(svcCtx *svc.ServiceContext) *LeaseProductServiceServer {
	return &LeaseProductServiceServer{
		svcCtx: svcCtx,
	}
}

// 产品查询
func (s *LeaseProductServiceServer) GetLeaseProduct(ctx context.Context, in *leaseproduct.GetLeaseProductReq) (*leaseproduct.GetLeaseProductResp, error) {
	l := logic.NewGetLeaseProductLogic(ctx, s.svcCtx)
	return l.GetLeaseProduct(in)
}

func (s *LeaseProductServiceServer) ListLeaseProducts(ctx context.Context, in *leaseproduct.ListLeaseProductsReq) (*leaseproduct.ListLeaseProductsResp, error) {
	l := logic.NewListLeaseProductsLogic(ctx, s.svcCtx)
	return l.ListLeaseProducts(in)
}

// 产品管理
func (s *LeaseProductServiceServer) CreateLeaseProduct(ctx context.Context, in *leaseproduct.CreateLeaseProductReq) (*leaseproduct.CreateLeaseProductResp, error) {
	l := logic.NewCreateLeaseProductLogic(ctx, s.svcCtx)
	return l.CreateLeaseProduct(in)
}

func (s *LeaseProductServiceServer) UpdateLeaseProduct(ctx context.Context, in *leaseproduct.UpdateLeaseProductReq) (*leaseproduct.UpdateLeaseProductResp, error) {
	l := logic.NewUpdateLeaseProductLogic(ctx, s.svcCtx)
	return l.UpdateLeaseProduct(in)
}

func (s *LeaseProductServiceServer) DeleteLeaseProduct(ctx context.Context, in *leaseproduct.DeleteLeaseProductReq) (*leaseproduct.DeleteLeaseProductResp, error) {
	l := logic.NewDeleteLeaseProductLogic(ctx, s.svcCtx)
	return l.DeleteLeaseProduct(in)
}

// 库存检查
func (s *LeaseProductServiceServer) CheckInventoryAvailability(ctx context.Context, in *leaseproduct.CheckInventoryAvailabilityReq) (*leaseproduct.CheckInventoryAvailabilityResp, error) {
	l := logic.NewCheckInventoryAvailabilityLogic(ctx, s.svcCtx)
	return l.CheckInventoryAvailability(in)
}
