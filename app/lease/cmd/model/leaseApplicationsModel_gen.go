// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	leaseApplicationsFieldNames          = builder.RawFieldNames(&LeaseApplications{})
	leaseApplicationsRows                = strings.Join(leaseApplicationsFieldNames, ",")
	leaseApplicationsRowsExpectAutoSet   = strings.Join(stringx.Remove(leaseApplicationsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	leaseApplicationsRowsWithPlaceHolder = strings.Join(stringx.Remove(leaseApplicationsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheLeaseApplicationsIdPrefix            = "cache:leaseApplications:id:"
	cacheLeaseApplicationsApplicationIdPrefix = "cache:leaseApplications:applicationId:"
)

type (
	leaseApplicationsModel interface {
		Insert(ctx context.Context, data *LeaseApplications) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*LeaseApplications, error)
		FindOneByApplicationId(ctx context.Context, applicationId string) (*LeaseApplications, error)
		Update(ctx context.Context, data *LeaseApplications) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultLeaseApplicationsModel struct {
		sqlc.CachedConn
		table string
	}

	LeaseApplications struct {
		Id              uint64         `db:"id"`               // 申请ID
		ApplicationId   string         `db:"application_id"`   // 申请编号
		UserId          uint64         `db:"user_id"`          // 用户ID
		ApplicantName   string         `db:"applicant_name"`   // 申请人姓名
		ProductId       uint64         `db:"product_id"`       // 租赁产品ID
		ProductCode     string         `db:"product_code"`     // 产品编码
		Name            string         `db:"name"`             // 申请名称
		Type            string         `db:"type"`             // 租赁类型
		Machinery       string         `db:"machinery"`        // 设备名称
		StartDate       time.Time      `db:"start_date"`       // 开始日期
		EndDate         time.Time      `db:"end_date"`         // 结束日期
		Duration        uint64         `db:"duration"`         // 租期(天)
		DailyRate       float64        `db:"daily_rate"`       // 日租金
		TotalAmount     float64        `db:"total_amount"`     // 总金额
		Deposit         float64        `db:"deposit"`          // 押金
		DeliveryAddress string         `db:"delivery_address"` // 交付地址
		ContactPhone    string         `db:"contact_phone"`    // 联系电话
		Purpose         sql.NullString `db:"purpose"`          // 使用目的
		Status          string         `db:"status"`           // 状态 pending/approved/rejected/cancelled
		CreatedAt       time.Time      `db:"created_at"`       // 创建时间
		UpdatedAt       time.Time      `db:"updated_at"`       // 更新时间
	}
)

func newLeaseApplicationsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultLeaseApplicationsModel {
	return &defaultLeaseApplicationsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`lease_applications`",
	}
}

func (m *defaultLeaseApplicationsModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	leaseApplicationsApplicationIdKey := fmt.Sprintf("%s%v", cacheLeaseApplicationsApplicationIdPrefix, data.ApplicationId)
	leaseApplicationsIdKey := fmt.Sprintf("%s%v", cacheLeaseApplicationsIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, leaseApplicationsApplicationIdKey, leaseApplicationsIdKey)
	return err
}

func (m *defaultLeaseApplicationsModel) FindOne(ctx context.Context, id uint64) (*LeaseApplications, error) {
	leaseApplicationsIdKey := fmt.Sprintf("%s%v", cacheLeaseApplicationsIdPrefix, id)
	var resp LeaseApplications
	err := m.QueryRowCtx(ctx, &resp, leaseApplicationsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", leaseApplicationsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLeaseApplicationsModel) FindOneByApplicationId(ctx context.Context, applicationId string) (*LeaseApplications, error) {
	leaseApplicationsApplicationIdKey := fmt.Sprintf("%s%v", cacheLeaseApplicationsApplicationIdPrefix, applicationId)
	var resp LeaseApplications
	err := m.QueryRowIndexCtx(ctx, &resp, leaseApplicationsApplicationIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `application_id` = ? limit 1", leaseApplicationsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, applicationId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLeaseApplicationsModel) Insert(ctx context.Context, data *LeaseApplications) (sql.Result, error) {
	leaseApplicationsApplicationIdKey := fmt.Sprintf("%s%v", cacheLeaseApplicationsApplicationIdPrefix, data.ApplicationId)
	leaseApplicationsIdKey := fmt.Sprintf("%s%v", cacheLeaseApplicationsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, leaseApplicationsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ApplicationId, data.UserId, data.ApplicantName, data.ProductId, data.ProductCode, data.Name, data.Type, data.Machinery, data.StartDate, data.EndDate, data.Duration, data.DailyRate, data.TotalAmount, data.Deposit, data.DeliveryAddress, data.ContactPhone, data.Purpose, data.Status)
	}, leaseApplicationsApplicationIdKey, leaseApplicationsIdKey)
	return ret, err
}

func (m *defaultLeaseApplicationsModel) Update(ctx context.Context, newData *LeaseApplications) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	leaseApplicationsApplicationIdKey := fmt.Sprintf("%s%v", cacheLeaseApplicationsApplicationIdPrefix, data.ApplicationId)
	leaseApplicationsIdKey := fmt.Sprintf("%s%v", cacheLeaseApplicationsIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, leaseApplicationsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.ApplicationId, newData.UserId, newData.ApplicantName, newData.ProductId, newData.ProductCode, newData.Name, newData.Type, newData.Machinery, newData.StartDate, newData.EndDate, newData.Duration, newData.DailyRate, newData.TotalAmount, newData.Deposit, newData.DeliveryAddress, newData.ContactPhone, newData.Purpose, newData.Status, newData.Id)
	}, leaseApplicationsApplicationIdKey, leaseApplicationsIdKey)
	return err
}

func (m *defaultLeaseApplicationsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheLeaseApplicationsIdPrefix, primary)
}

func (m *defaultLeaseApplicationsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", leaseApplicationsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultLeaseApplicationsModel) tableName() string {
	return m.table
}
