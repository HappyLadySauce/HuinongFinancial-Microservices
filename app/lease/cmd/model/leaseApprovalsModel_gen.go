// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	leaseApprovalsFieldNames          = builder.RawFieldNames(&LeaseApprovals{})
	leaseApprovalsRows                = strings.Join(leaseApprovalsFieldNames, ",")
	leaseApprovalsRowsExpectAutoSet   = strings.Join(stringx.Remove(leaseApprovalsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	leaseApprovalsRowsWithPlaceHolder = strings.Join(stringx.Remove(leaseApprovalsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheLeaseApprovalsIdPrefix = "cache:leaseApprovals:id:"
)

type (
	leaseApprovalsModel interface {
		Insert(ctx context.Context, data *LeaseApprovals) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*LeaseApprovals, error)
		Update(ctx context.Context, data *LeaseApprovals) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultLeaseApprovalsModel struct {
		sqlc.CachedConn
		table string
	}

	LeaseApprovals struct {
		Id               uint64          `db:"id"`                // 审批ID
		ApplicationId    uint64          `db:"application_id"`    // 申请ID
		AuditorId        uint64          `db:"auditor_id"`        // 审核员ID
		AuditorName      string          `db:"auditor_name"`      // 审核员姓名
		Action           string          `db:"action"`            // 审批动作 approve/reject
		Suggestions      sql.NullString  `db:"suggestions"`       // 审批意见
		ApprovedDuration sql.NullInt64   `db:"approved_duration"` // 批准租期(天)
		ApprovedAmount   sql.NullFloat64 `db:"approved_amount"`   // 批准金额
		ApprovedDeposit  sql.NullFloat64 `db:"approved_deposit"`  // 批准押金
		CreatedAt        time.Time       `db:"created_at"`        // 创建时间
	}
)

func newLeaseApprovalsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultLeaseApprovalsModel {
	return &defaultLeaseApprovalsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`lease_approvals`",
	}
}

func (m *defaultLeaseApprovalsModel) Delete(ctx context.Context, id uint64) error {
	leaseApprovalsIdKey := fmt.Sprintf("%s%v", cacheLeaseApprovalsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, leaseApprovalsIdKey)
	return err
}

func (m *defaultLeaseApprovalsModel) FindOne(ctx context.Context, id uint64) (*LeaseApprovals, error) {
	leaseApprovalsIdKey := fmt.Sprintf("%s%v", cacheLeaseApprovalsIdPrefix, id)
	var resp LeaseApprovals
	err := m.QueryRowCtx(ctx, &resp, leaseApprovalsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", leaseApprovalsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLeaseApprovalsModel) Insert(ctx context.Context, data *LeaseApprovals) (sql.Result, error) {
	leaseApprovalsIdKey := fmt.Sprintf("%s%v", cacheLeaseApprovalsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, leaseApprovalsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ApplicationId, data.AuditorId, data.AuditorName, data.Action, data.Suggestions, data.ApprovedDuration, data.ApprovedAmount, data.ApprovedDeposit)
	}, leaseApprovalsIdKey)
	return ret, err
}

func (m *defaultLeaseApprovalsModel) Update(ctx context.Context, data *LeaseApprovals) error {
	leaseApprovalsIdKey := fmt.Sprintf("%s%v", cacheLeaseApprovalsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, leaseApprovalsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ApplicationId, data.AuditorId, data.AuditorName, data.Action, data.Suggestions, data.ApprovedDuration, data.ApprovedAmount, data.ApprovedDeposit, data.Id)
	}, leaseApprovalsIdKey)
	return err
}

func (m *defaultLeaseApprovalsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheLeaseApprovalsIdPrefix, primary)
}

func (m *defaultLeaseApprovalsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", leaseApprovalsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultLeaseApprovalsModel) tableName() string {
	return m.table
}
