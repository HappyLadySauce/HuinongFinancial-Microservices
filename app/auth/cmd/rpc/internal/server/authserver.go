// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: auth-rpc.proto

package server

import (
	"context"

	"rpc/auth"
	"rpc/internal/logic"
	"rpc/internal/svc"
)

type AuthServer struct {
	svcCtx *svc.ServiceContext
	auth.UnimplementedAuthServer
}

func NewAuthServer(svcCtx *svc.ServiceContext) *AuthServer {
	return &AuthServer{
		svcCtx: svcCtx,
	}
}

// 用户登录
func (s *AuthServer) AppLogin(ctx context.Context, in *auth.AppLoginReq) (*auth.LoginResp, error) {
	l := logic.NewAppLoginLogic(ctx, s.svcCtx)
	return l.AppLogin(in)
}

func (s *AuthServer) OALogin(ctx context.Context, in *auth.OALoginReq) (*auth.LoginResp, error) {
	l := logic.NewOALoginLogic(ctx, s.svcCtx)
	return l.OALogin(in)
}

// Token管理
func (s *AuthServer) GenerateToken(ctx context.Context, in *auth.GenerateTokenReq) (*auth.GenerateTokenResp, error) {
	l := logic.NewGenerateTokenLogic(ctx, s.svcCtx)
	return l.GenerateToken(in)
}

func (s *AuthServer) ValidateToken(ctx context.Context, in *auth.ValidateTokenReq) (*auth.ValidateTokenResp, error) {
	l := logic.NewValidateTokenLogic(ctx, s.svcCtx)
	return l.ValidateToken(in)
}

func (s *AuthServer) InvalidateToken(ctx context.Context, in *auth.ValidateTokenReq) (*auth.InvalidateTokenResp, error) {
	l := logic.NewInvalidateTokenLogic(ctx, s.svcCtx)
	return l.InvalidateToken(in)
}
