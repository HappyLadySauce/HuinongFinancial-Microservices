// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: auth-rpc.proto

package authclient

import (
	"context"

	"rpc/auth"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AppLoginReq         = auth.AppLoginReq
	GenerateTokenReq    = auth.GenerateTokenReq
	GenerateTokenResp   = auth.GenerateTokenResp
	InvalidateTokenResp = auth.InvalidateTokenResp
	LoginResp           = auth.LoginResp
	OALoginReq          = auth.OALoginReq
	ValidateTokenReq    = auth.ValidateTokenReq
	ValidateTokenResp   = auth.ValidateTokenResp

	Auth interface {
		// 用户登录
		AppLogin(ctx context.Context, in *AppLoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		OALogin(ctx context.Context, in *OALoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		// Token管理
		GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error)
		ValidateToken(ctx context.Context, in *ValidateTokenReq, opts ...grpc.CallOption) (*ValidateTokenResp, error)
		InvalidateToken(ctx context.Context, in *ValidateTokenReq, opts ...grpc.CallOption) (*InvalidateTokenResp, error)
	}

	defaultAuth struct {
		cli zrpc.Client
	}
)

func NewAuth(cli zrpc.Client) Auth {
	return &defaultAuth{
		cli: cli,
	}
}

// 用户登录
func (m *defaultAuth) AppLogin(ctx context.Context, in *AppLoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := auth.NewAuthClient(m.cli.Conn())
	return client.AppLogin(ctx, in, opts...)
}

func (m *defaultAuth) OALogin(ctx context.Context, in *OALoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := auth.NewAuthClient(m.cli.Conn())
	return client.OALogin(ctx, in, opts...)
}

// Token管理
func (m *defaultAuth) GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error) {
	client := auth.NewAuthClient(m.cli.Conn())
	return client.GenerateToken(ctx, in, opts...)
}

func (m *defaultAuth) ValidateToken(ctx context.Context, in *ValidateTokenReq, opts ...grpc.CallOption) (*ValidateTokenResp, error) {
	client := auth.NewAuthClient(m.cli.Conn())
	return client.ValidateToken(ctx, in, opts...)
}

func (m *defaultAuth) InvalidateToken(ctx context.Context, in *ValidateTokenReq, opts ...grpc.CallOption) (*InvalidateTokenResp, error) {
	client := auth.NewAuthClient(m.cli.Conn())
	return client.InvalidateToken(ctx, in, opts...)
}
