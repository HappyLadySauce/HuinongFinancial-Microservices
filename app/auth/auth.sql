-- Auth服务架构说明
-- 数据库: 无需数据库，使用Redis缓存
-- Redis连接: redis://10.10.10.6:6379/0
-- 
-- Auth服务设计原则：
-- 1. 无状态JWT认证，不依赖数据库会话
-- 2. 使用Redis存储Token黑名单和登录限制
-- 3. 用户基础信息通过RPC调用其他服务获取
-- 
-- Redis Key设计：
-- auth:blacklist:{token_hash}     - Token黑名单，TTL为Token过期时间
-- auth:login_limit:{account}      - 登录失败限制，TTL为限制时间
-- auth:refresh:{user_id}:{type}   - RefreshToken存储，TTL为7天
-- 
-- 无需创建任何数据库表，所有认证状态存储在Redis中
-- 
-- JWT Token设计：
-- {
--   "user_id": 123,
--   "type": "appuser", // appuser 或 oauser
--   "exp": 1672531200, // 过期时间
--   "iat": 1672444800, // 签发时间
--   "jti": "uuid"      // Token唯一标识
-- }
-- 
-- 服务依赖：
-- 1. 用户验证 -> appuser-rpc.GetUserByAccount() 或 oauser-rpc.GetUserByAccount()
-- 2. 用户信息 -> appuser-rpc.GetUserInfo() 或 oauser-rpc.GetUserInfo()
-- 
-- 认证流程：
-- 1. 登录 -> 调用用户服务验证 -> 生成JWT -> 存储RefreshToken到Redis
-- 2. 验证 -> 解析JWT -> 检查黑名单 -> 返回用户信息(可选通过RPC获取最新信息)
-- 3. 登出 -> 将Token加入黑名单Redis
-- 4. 刷新 -> 验证RefreshToken -> 生成新的AccessToken
-- 
-- 注意：Auth服务专注于认证逻辑，不存储用户业务数据
