// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	oaUsersFieldNames          = builder.RawFieldNames(&OaUsers{})
	oaUsersRows                = strings.Join(oaUsersFieldNames, ",")
	oaUsersRowsExpectAutoSet   = strings.Join(stringx.Remove(oaUsersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	oaUsersRowsWithPlaceHolder = strings.Join(stringx.Remove(oaUsersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheOaUsersIdPrefix       = "cache:oaUsers:id:"
	cacheOaUsersUsernamePrefix = "cache:oaUsers:username:"
)

type (
	oaUsersModel interface {
		Insert(ctx context.Context, data *OaUsers) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*OaUsers, error)
		FindOneByUsername(ctx context.Context, username string) (*OaUsers, error)
		Update(ctx context.Context, data *OaUsers) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultOaUsersModel struct {
		sqlc.CachedConn
		table string
	}

	OaUsers struct {
		Id           uint64    `db:"id"`            // 用户ID
		Username     string    `db:"username"`      // 用户名
		PasswordHash string    `db:"password_hash"` // 密码哈希
		Name         string    `db:"name"`          // 姓名
		Email        string    `db:"email"`         // 邮箱
		Mobile       string    `db:"mobile"`        // 手机号
		Roles        string    `db:"roles"`         // 角色列表(逗号分隔)
		Status       uint64    `db:"status"`        // 状态 1:正常 2:禁用
		CreatedAt    time.Time `db:"created_at"`    // 创建时间
		UpdatedAt    time.Time `db:"updated_at"`    // 更新时间
	}
)

func newOaUsersModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultOaUsersModel {
	return &defaultOaUsersModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`oa_users`",
	}
}

func (m *defaultOaUsersModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	oaUsersIdKey := fmt.Sprintf("%s%v", cacheOaUsersIdPrefix, id)
	oaUsersUsernameKey := fmt.Sprintf("%s%v", cacheOaUsersUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, oaUsersIdKey, oaUsersUsernameKey)
	return err
}

func (m *defaultOaUsersModel) FindOne(ctx context.Context, id uint64) (*OaUsers, error) {
	oaUsersIdKey := fmt.Sprintf("%s%v", cacheOaUsersIdPrefix, id)
	var resp OaUsers
	err := m.QueryRowCtx(ctx, &resp, oaUsersIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", oaUsersRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOaUsersModel) FindOneByUsername(ctx context.Context, username string) (*OaUsers, error) {
	oaUsersUsernameKey := fmt.Sprintf("%s%v", cacheOaUsersUsernamePrefix, username)
	var resp OaUsers
	err := m.QueryRowIndexCtx(ctx, &resp, oaUsersUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", oaUsersRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, username); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOaUsersModel) Insert(ctx context.Context, data *OaUsers) (sql.Result, error) {
	oaUsersIdKey := fmt.Sprintf("%s%v", cacheOaUsersIdPrefix, data.Id)
	oaUsersUsernameKey := fmt.Sprintf("%s%v", cacheOaUsersUsernamePrefix, data.Username)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, oaUsersRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Username, data.PasswordHash, data.Name, data.Email, data.Mobile, data.Roles, data.Status)
	}, oaUsersIdKey, oaUsersUsernameKey)
	return ret, err
}

func (m *defaultOaUsersModel) Update(ctx context.Context, newData *OaUsers) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	oaUsersIdKey := fmt.Sprintf("%s%v", cacheOaUsersIdPrefix, data.Id)
	oaUsersUsernameKey := fmt.Sprintf("%s%v", cacheOaUsersUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, oaUsersRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Username, newData.PasswordHash, newData.Name, newData.Email, newData.Mobile, newData.Roles, newData.Status, newData.Id)
	}, oaUsersIdKey, oaUsersUsernameKey)
	return err
}

func (m *defaultOaUsersModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheOaUsersIdPrefix, primary)
}

func (m *defaultOaUsersModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", oaUsersRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOaUsersModel) tableName() string {
	return m.table
}
