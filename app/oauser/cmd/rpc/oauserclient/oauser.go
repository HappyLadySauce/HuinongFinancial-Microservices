// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: oauser-rpc.proto

package oauserclient

import (
	"context"

	"rpc/oauser"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ChangePasswordReq  = oauser.ChangePasswordReq
	ChangePasswordResp = oauser.ChangePasswordResp
	DeleteUserReq      = oauser.DeleteUserReq
	DeleteUserResp     = oauser.DeleteUserResp
	GetUserInfoReq     = oauser.GetUserInfoReq
	GetUserInfoResp    = oauser.GetUserInfoResp
	LoginReq           = oauser.LoginReq
	LoginResp          = oauser.LoginResp
	LogoutReq          = oauser.LogoutReq
	LogoutResp         = oauser.LogoutResp
	RegisterReq        = oauser.RegisterReq
	RegisterResp       = oauser.RegisterResp
	UpdateUserInfoReq  = oauser.UpdateUserInfoReq
	UpdateUserInfoResp = oauser.UpdateUserInfoResp
	UserInfo           = oauser.UserInfo

	OaUser interface {
		// 用户信息管理
		GetUserByPhone(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
		UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error)
		DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserResp, error)
		// 用户认证管理
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error)
		ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*ChangePasswordResp, error)
	}

	defaultOaUser struct {
		cli zrpc.Client
	}
)

func NewOaUser(cli zrpc.Client) OaUser {
	return &defaultOaUser{
		cli: cli,
	}
}

// 用户信息管理
func (m *defaultOaUser) GetUserByPhone(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	client := oauser.NewOaUserClient(m.cli.Conn())
	return client.GetUserByPhone(ctx, in, opts...)
}

func (m *defaultOaUser) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error) {
	client := oauser.NewOaUserClient(m.cli.Conn())
	return client.UpdateUserInfo(ctx, in, opts...)
}

func (m *defaultOaUser) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserResp, error) {
	client := oauser.NewOaUserClient(m.cli.Conn())
	return client.DeleteUser(ctx, in, opts...)
}

// 用户认证管理
func (m *defaultOaUser) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := oauser.NewOaUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultOaUser) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := oauser.NewOaUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultOaUser) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error) {
	client := oauser.NewOaUserClient(m.cli.Conn())
	return client.Logout(ctx, in, opts...)
}

func (m *defaultOaUser) ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*ChangePasswordResp, error) {
	client := oauser.NewOaUserClient(m.cli.Conn())
	return client.ChangePassword(ctx, in, opts...)
}
