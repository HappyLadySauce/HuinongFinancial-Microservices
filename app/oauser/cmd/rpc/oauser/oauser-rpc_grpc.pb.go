// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: oauser-rpc.proto

package oauser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OAUser_GetOAUserByUsername_FullMethodName = "/oauser.OAUser/GetOAUserByUsername"
	OAUser_VerifyOAPassword_FullMethodName    = "/oauser.OAUser/VerifyOAPassword"
	OAUser_GetOAUserList_FullMethodName       = "/oauser.OAUser/GetOAUserList"
	OAUser_GetOAUserDetail_FullMethodName     = "/oauser.OAUser/GetOAUserDetail"
	OAUser_CreateOAUser_FullMethodName        = "/oauser.OAUser/CreateOAUser"
	OAUser_UpdateOAUser_FullMethodName        = "/oauser.OAUser/UpdateOAUser"
	OAUser_DeleteOAUser_FullMethodName        = "/oauser.OAUser/DeleteOAUser"
)

// OAUserClient is the client API for OAUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// --------------------
// OAUser RPC 服务定义
// --------------------
type OAUserClient interface {
	// --- 认证(内部调用) ---
	GetOAUserByUsername(ctx context.Context, in *GetOAUserByUsernameReq, opts ...grpc.CallOption) (*OAUserInfo, error)
	VerifyOAPassword(ctx context.Context, in *VerifyOAPasswordReq, opts ...grpc.CallOption) (*VerifyOAPasswordResp, error)
	// --- 用户管理 ---
	GetOAUserList(ctx context.Context, in *GetOAUserListReq, opts ...grpc.CallOption) (*GetOAUserListResp, error)
	GetOAUserDetail(ctx context.Context, in *GetOAUserByUsernameReq, opts ...grpc.CallOption) (*OAUserInfo, error)
	CreateOAUser(ctx context.Context, in *CreateOAUserReq, opts ...grpc.CallOption) (*OAUserInfo, error)
	UpdateOAUser(ctx context.Context, in *UpdateOAUserReq, opts ...grpc.CallOption) (*OAUserInfo, error)
	DeleteOAUser(ctx context.Context, in *GetOAUserByUsernameReq, opts ...grpc.CallOption) (*OAUserInfo, error)
}

type oAUserClient struct {
	cc grpc.ClientConnInterface
}

func NewOAUserClient(cc grpc.ClientConnInterface) OAUserClient {
	return &oAUserClient{cc}
}

func (c *oAUserClient) GetOAUserByUsername(ctx context.Context, in *GetOAUserByUsernameReq, opts ...grpc.CallOption) (*OAUserInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OAUserInfo)
	err := c.cc.Invoke(ctx, OAUser_GetOAUserByUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAUserClient) VerifyOAPassword(ctx context.Context, in *VerifyOAPasswordReq, opts ...grpc.CallOption) (*VerifyOAPasswordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyOAPasswordResp)
	err := c.cc.Invoke(ctx, OAUser_VerifyOAPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAUserClient) GetOAUserList(ctx context.Context, in *GetOAUserListReq, opts ...grpc.CallOption) (*GetOAUserListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOAUserListResp)
	err := c.cc.Invoke(ctx, OAUser_GetOAUserList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAUserClient) GetOAUserDetail(ctx context.Context, in *GetOAUserByUsernameReq, opts ...grpc.CallOption) (*OAUserInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OAUserInfo)
	err := c.cc.Invoke(ctx, OAUser_GetOAUserDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAUserClient) CreateOAUser(ctx context.Context, in *CreateOAUserReq, opts ...grpc.CallOption) (*OAUserInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OAUserInfo)
	err := c.cc.Invoke(ctx, OAUser_CreateOAUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAUserClient) UpdateOAUser(ctx context.Context, in *UpdateOAUserReq, opts ...grpc.CallOption) (*OAUserInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OAUserInfo)
	err := c.cc.Invoke(ctx, OAUser_UpdateOAUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAUserClient) DeleteOAUser(ctx context.Context, in *GetOAUserByUsernameReq, opts ...grpc.CallOption) (*OAUserInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OAUserInfo)
	err := c.cc.Invoke(ctx, OAUser_DeleteOAUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OAUserServer is the server API for OAUser service.
// All implementations must embed UnimplementedOAUserServer
// for forward compatibility.
//
// --------------------
// OAUser RPC 服务定义
// --------------------
type OAUserServer interface {
	// --- 认证(内部调用) ---
	GetOAUserByUsername(context.Context, *GetOAUserByUsernameReq) (*OAUserInfo, error)
	VerifyOAPassword(context.Context, *VerifyOAPasswordReq) (*VerifyOAPasswordResp, error)
	// --- 用户管理 ---
	GetOAUserList(context.Context, *GetOAUserListReq) (*GetOAUserListResp, error)
	GetOAUserDetail(context.Context, *GetOAUserByUsernameReq) (*OAUserInfo, error)
	CreateOAUser(context.Context, *CreateOAUserReq) (*OAUserInfo, error)
	UpdateOAUser(context.Context, *UpdateOAUserReq) (*OAUserInfo, error)
	DeleteOAUser(context.Context, *GetOAUserByUsernameReq) (*OAUserInfo, error)
	mustEmbedUnimplementedOAUserServer()
}

// UnimplementedOAUserServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOAUserServer struct{}

func (UnimplementedOAUserServer) GetOAUserByUsername(context.Context, *GetOAUserByUsernameReq) (*OAUserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOAUserByUsername not implemented")
}
func (UnimplementedOAUserServer) VerifyOAPassword(context.Context, *VerifyOAPasswordReq) (*VerifyOAPasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOAPassword not implemented")
}
func (UnimplementedOAUserServer) GetOAUserList(context.Context, *GetOAUserListReq) (*GetOAUserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOAUserList not implemented")
}
func (UnimplementedOAUserServer) GetOAUserDetail(context.Context, *GetOAUserByUsernameReq) (*OAUserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOAUserDetail not implemented")
}
func (UnimplementedOAUserServer) CreateOAUser(context.Context, *CreateOAUserReq) (*OAUserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOAUser not implemented")
}
func (UnimplementedOAUserServer) UpdateOAUser(context.Context, *UpdateOAUserReq) (*OAUserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOAUser not implemented")
}
func (UnimplementedOAUserServer) DeleteOAUser(context.Context, *GetOAUserByUsernameReq) (*OAUserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOAUser not implemented")
}
func (UnimplementedOAUserServer) mustEmbedUnimplementedOAUserServer() {}
func (UnimplementedOAUserServer) testEmbeddedByValue()                {}

// UnsafeOAUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OAUserServer will
// result in compilation errors.
type UnsafeOAUserServer interface {
	mustEmbedUnimplementedOAUserServer()
}

func RegisterOAUserServer(s grpc.ServiceRegistrar, srv OAUserServer) {
	// If the following call pancis, it indicates UnimplementedOAUserServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OAUser_ServiceDesc, srv)
}

func _OAUser_GetOAUserByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOAUserByUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAUserServer).GetOAUserByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAUser_GetOAUserByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAUserServer).GetOAUserByUsername(ctx, req.(*GetOAUserByUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAUser_VerifyOAPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyOAPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAUserServer).VerifyOAPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAUser_VerifyOAPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAUserServer).VerifyOAPassword(ctx, req.(*VerifyOAPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAUser_GetOAUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOAUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAUserServer).GetOAUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAUser_GetOAUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAUserServer).GetOAUserList(ctx, req.(*GetOAUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAUser_GetOAUserDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOAUserByUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAUserServer).GetOAUserDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAUser_GetOAUserDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAUserServer).GetOAUserDetail(ctx, req.(*GetOAUserByUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAUser_CreateOAUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOAUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAUserServer).CreateOAUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAUser_CreateOAUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAUserServer).CreateOAUser(ctx, req.(*CreateOAUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAUser_UpdateOAUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOAUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAUserServer).UpdateOAUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAUser_UpdateOAUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAUserServer).UpdateOAUser(ctx, req.(*UpdateOAUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAUser_DeleteOAUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOAUserByUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAUserServer).DeleteOAUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAUser_DeleteOAUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAUserServer).DeleteOAUser(ctx, req.(*GetOAUserByUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OAUser_ServiceDesc is the grpc.ServiceDesc for OAUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OAUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oauser.OAUser",
	HandlerType: (*OAUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOAUserByUsername",
			Handler:    _OAUser_GetOAUserByUsername_Handler,
		},
		{
			MethodName: "VerifyOAPassword",
			Handler:    _OAUser_VerifyOAPassword_Handler,
		},
		{
			MethodName: "GetOAUserList",
			Handler:    _OAUser_GetOAUserList_Handler,
		},
		{
			MethodName: "GetOAUserDetail",
			Handler:    _OAUser_GetOAUserDetail_Handler,
		},
		{
			MethodName: "CreateOAUser",
			Handler:    _OAUser_CreateOAUser_Handler,
		},
		{
			MethodName: "UpdateOAUser",
			Handler:    _OAUser_UpdateOAUser_Handler,
		},
		{
			MethodName: "DeleteOAUser",
			Handler:    _OAUser_DeleteOAUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oauser-rpc.proto",
}
