// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: loan-rpc.proto

package loan

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Loan_CreateLoanApplication_FullMethodName  = "/loan.Loan/CreateLoanApplication"
	Loan_GetLoanApplication_FullMethodName     = "/loan.Loan/GetLoanApplication"
	Loan_ListLoanApplications_FullMethodName   = "/loan.Loan/ListLoanApplications"
	Loan_UpdateLoanApplication_FullMethodName  = "/loan.Loan/UpdateLoanApplication"
	Loan_CancelLoanApplication_FullMethodName  = "/loan.Loan/CancelLoanApplication"
	Loan_ApproveLoanApplication_FullMethodName = "/loan.Loan/ApproveLoanApplication"
	Loan_ListLoanApprovals_FullMethodName      = "/loan.Loan/ListLoanApprovals"
)

// LoanClient is the client API for Loan service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Loan服务 - 包含贷款申请管理和审批管理
type LoanClient interface {
	// 贷款申请管理
	CreateLoanApplication(ctx context.Context, in *CreateLoanApplicationReq, opts ...grpc.CallOption) (*CreateLoanApplicationResp, error)
	GetLoanApplication(ctx context.Context, in *GetLoanApplicationReq, opts ...grpc.CallOption) (*GetLoanApplicationResp, error)
	ListLoanApplications(ctx context.Context, in *ListLoanApplicationsReq, opts ...grpc.CallOption) (*ListLoanApplicationsResp, error)
	UpdateLoanApplication(ctx context.Context, in *UpdateLoanApplicationReq, opts ...grpc.CallOption) (*UpdateLoanApplicationResp, error)
	CancelLoanApplication(ctx context.Context, in *CancelLoanApplicationReq, opts ...grpc.CallOption) (*CancelLoanApplicationResp, error)
	// 贷款审批管理
	ApproveLoanApplication(ctx context.Context, in *ApproveLoanApplicationReq, opts ...grpc.CallOption) (*ApproveLoanApplicationResp, error)
	ListLoanApprovals(ctx context.Context, in *ListLoanApprovalsReq, opts ...grpc.CallOption) (*ListLoanApprovalsResp, error)
}

type loanClient struct {
	cc grpc.ClientConnInterface
}

func NewLoanClient(cc grpc.ClientConnInterface) LoanClient {
	return &loanClient{cc}
}

func (c *loanClient) CreateLoanApplication(ctx context.Context, in *CreateLoanApplicationReq, opts ...grpc.CallOption) (*CreateLoanApplicationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLoanApplicationResp)
	err := c.cc.Invoke(ctx, Loan_CreateLoanApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanClient) GetLoanApplication(ctx context.Context, in *GetLoanApplicationReq, opts ...grpc.CallOption) (*GetLoanApplicationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLoanApplicationResp)
	err := c.cc.Invoke(ctx, Loan_GetLoanApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanClient) ListLoanApplications(ctx context.Context, in *ListLoanApplicationsReq, opts ...grpc.CallOption) (*ListLoanApplicationsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLoanApplicationsResp)
	err := c.cc.Invoke(ctx, Loan_ListLoanApplications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanClient) UpdateLoanApplication(ctx context.Context, in *UpdateLoanApplicationReq, opts ...grpc.CallOption) (*UpdateLoanApplicationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLoanApplicationResp)
	err := c.cc.Invoke(ctx, Loan_UpdateLoanApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanClient) CancelLoanApplication(ctx context.Context, in *CancelLoanApplicationReq, opts ...grpc.CallOption) (*CancelLoanApplicationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelLoanApplicationResp)
	err := c.cc.Invoke(ctx, Loan_CancelLoanApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanClient) ApproveLoanApplication(ctx context.Context, in *ApproveLoanApplicationReq, opts ...grpc.CallOption) (*ApproveLoanApplicationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveLoanApplicationResp)
	err := c.cc.Invoke(ctx, Loan_ApproveLoanApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanClient) ListLoanApprovals(ctx context.Context, in *ListLoanApprovalsReq, opts ...grpc.CallOption) (*ListLoanApprovalsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLoanApprovalsResp)
	err := c.cc.Invoke(ctx, Loan_ListLoanApprovals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoanServer is the server API for Loan service.
// All implementations must embed UnimplementedLoanServer
// for forward compatibility.
//
// Loan服务 - 包含贷款申请管理和审批管理
type LoanServer interface {
	// 贷款申请管理
	CreateLoanApplication(context.Context, *CreateLoanApplicationReq) (*CreateLoanApplicationResp, error)
	GetLoanApplication(context.Context, *GetLoanApplicationReq) (*GetLoanApplicationResp, error)
	ListLoanApplications(context.Context, *ListLoanApplicationsReq) (*ListLoanApplicationsResp, error)
	UpdateLoanApplication(context.Context, *UpdateLoanApplicationReq) (*UpdateLoanApplicationResp, error)
	CancelLoanApplication(context.Context, *CancelLoanApplicationReq) (*CancelLoanApplicationResp, error)
	// 贷款审批管理
	ApproveLoanApplication(context.Context, *ApproveLoanApplicationReq) (*ApproveLoanApplicationResp, error)
	ListLoanApprovals(context.Context, *ListLoanApprovalsReq) (*ListLoanApprovalsResp, error)
	mustEmbedUnimplementedLoanServer()
}

// UnimplementedLoanServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLoanServer struct{}

func (UnimplementedLoanServer) CreateLoanApplication(context.Context, *CreateLoanApplicationReq) (*CreateLoanApplicationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoanApplication not implemented")
}
func (UnimplementedLoanServer) GetLoanApplication(context.Context, *GetLoanApplicationReq) (*GetLoanApplicationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoanApplication not implemented")
}
func (UnimplementedLoanServer) ListLoanApplications(context.Context, *ListLoanApplicationsReq) (*ListLoanApplicationsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoanApplications not implemented")
}
func (UnimplementedLoanServer) UpdateLoanApplication(context.Context, *UpdateLoanApplicationReq) (*UpdateLoanApplicationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLoanApplication not implemented")
}
func (UnimplementedLoanServer) CancelLoanApplication(context.Context, *CancelLoanApplicationReq) (*CancelLoanApplicationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelLoanApplication not implemented")
}
func (UnimplementedLoanServer) ApproveLoanApplication(context.Context, *ApproveLoanApplicationReq) (*ApproveLoanApplicationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveLoanApplication not implemented")
}
func (UnimplementedLoanServer) ListLoanApprovals(context.Context, *ListLoanApprovalsReq) (*ListLoanApprovalsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoanApprovals not implemented")
}
func (UnimplementedLoanServer) mustEmbedUnimplementedLoanServer() {}
func (UnimplementedLoanServer) testEmbeddedByValue()              {}

// UnsafeLoanServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoanServer will
// result in compilation errors.
type UnsafeLoanServer interface {
	mustEmbedUnimplementedLoanServer()
}

func RegisterLoanServer(s grpc.ServiceRegistrar, srv LoanServer) {
	// If the following call pancis, it indicates UnimplementedLoanServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Loan_ServiceDesc, srv)
}

func _Loan_CreateLoanApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoanApplicationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanServer).CreateLoanApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Loan_CreateLoanApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanServer).CreateLoanApplication(ctx, req.(*CreateLoanApplicationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loan_GetLoanApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoanApplicationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanServer).GetLoanApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Loan_GetLoanApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanServer).GetLoanApplication(ctx, req.(*GetLoanApplicationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loan_ListLoanApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoanApplicationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanServer).ListLoanApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Loan_ListLoanApplications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanServer).ListLoanApplications(ctx, req.(*ListLoanApplicationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loan_UpdateLoanApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLoanApplicationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanServer).UpdateLoanApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Loan_UpdateLoanApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanServer).UpdateLoanApplication(ctx, req.(*UpdateLoanApplicationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loan_CancelLoanApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelLoanApplicationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanServer).CancelLoanApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Loan_CancelLoanApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanServer).CancelLoanApplication(ctx, req.(*CancelLoanApplicationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loan_ApproveLoanApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveLoanApplicationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanServer).ApproveLoanApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Loan_ApproveLoanApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanServer).ApproveLoanApplication(ctx, req.(*ApproveLoanApplicationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loan_ListLoanApprovals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoanApprovalsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanServer).ListLoanApprovals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Loan_ListLoanApprovals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanServer).ListLoanApprovals(ctx, req.(*ListLoanApprovalsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Loan_ServiceDesc is the grpc.ServiceDesc for Loan service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Loan_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loan.Loan",
	HandlerType: (*LoanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLoanApplication",
			Handler:    _Loan_CreateLoanApplication_Handler,
		},
		{
			MethodName: "GetLoanApplication",
			Handler:    _Loan_GetLoanApplication_Handler,
		},
		{
			MethodName: "ListLoanApplications",
			Handler:    _Loan_ListLoanApplications_Handler,
		},
		{
			MethodName: "UpdateLoanApplication",
			Handler:    _Loan_UpdateLoanApplication_Handler,
		},
		{
			MethodName: "CancelLoanApplication",
			Handler:    _Loan_CancelLoanApplication_Handler,
		},
		{
			MethodName: "ApproveLoanApplication",
			Handler:    _Loan_ApproveLoanApplication_Handler,
		},
		{
			MethodName: "ListLoanApprovals",
			Handler:    _Loan_ListLoanApprovals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loan-rpc.proto",
}
