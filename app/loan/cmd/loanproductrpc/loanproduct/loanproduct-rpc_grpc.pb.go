// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: loanproduct-rpc.proto

package loanproduct

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LoanProductService_GetLoanProduct_FullMethodName      = "/loanproduct.LoanProductService/GetLoanProduct"
	LoanProductService_ListLoanProducts_FullMethodName    = "/loanproduct.LoanProductService/ListLoanProducts"
	LoanProductService_CreateLoanProduct_FullMethodName   = "/loanproduct.LoanProductService/CreateLoanProduct"
	LoanProductService_UpdateLoanProduct_FullMethodName   = "/loanproduct.LoanProductService/UpdateLoanProduct"
	LoanProductService_DeleteLoanProduct_FullMethodName   = "/loanproduct.LoanProductService/DeleteLoanProduct"
	LoanProductService_UpdateProductStatus_FullMethodName = "/loanproduct.LoanProductService/UpdateProductStatus"
)

// LoanProductServiceClient is the client API for LoanProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// === 服务定义 ===
type LoanProductServiceClient interface {
	// 产品查询
	GetLoanProduct(ctx context.Context, in *GetLoanProductReq, opts ...grpc.CallOption) (*GetLoanProductResp, error)
	ListLoanProducts(ctx context.Context, in *ListLoanProductsReq, opts ...grpc.CallOption) (*ListLoanProductsResp, error)
	// 产品管理
	CreateLoanProduct(ctx context.Context, in *CreateLoanProductReq, opts ...grpc.CallOption) (*CreateLoanProductResp, error)
	UpdateLoanProduct(ctx context.Context, in *UpdateLoanProductReq, opts ...grpc.CallOption) (*UpdateLoanProductResp, error)
	DeleteLoanProduct(ctx context.Context, in *DeleteLoanProductReq, opts ...grpc.CallOption) (*DeleteLoanProductResp, error)
	UpdateProductStatus(ctx context.Context, in *UpdateProductStatusReq, opts ...grpc.CallOption) (*UpdateProductStatusResp, error)
}

type loanProductServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoanProductServiceClient(cc grpc.ClientConnInterface) LoanProductServiceClient {
	return &loanProductServiceClient{cc}
}

func (c *loanProductServiceClient) GetLoanProduct(ctx context.Context, in *GetLoanProductReq, opts ...grpc.CallOption) (*GetLoanProductResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLoanProductResp)
	err := c.cc.Invoke(ctx, LoanProductService_GetLoanProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanProductServiceClient) ListLoanProducts(ctx context.Context, in *ListLoanProductsReq, opts ...grpc.CallOption) (*ListLoanProductsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLoanProductsResp)
	err := c.cc.Invoke(ctx, LoanProductService_ListLoanProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanProductServiceClient) CreateLoanProduct(ctx context.Context, in *CreateLoanProductReq, opts ...grpc.CallOption) (*CreateLoanProductResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLoanProductResp)
	err := c.cc.Invoke(ctx, LoanProductService_CreateLoanProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanProductServiceClient) UpdateLoanProduct(ctx context.Context, in *UpdateLoanProductReq, opts ...grpc.CallOption) (*UpdateLoanProductResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLoanProductResp)
	err := c.cc.Invoke(ctx, LoanProductService_UpdateLoanProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanProductServiceClient) DeleteLoanProduct(ctx context.Context, in *DeleteLoanProductReq, opts ...grpc.CallOption) (*DeleteLoanProductResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLoanProductResp)
	err := c.cc.Invoke(ctx, LoanProductService_DeleteLoanProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanProductServiceClient) UpdateProductStatus(ctx context.Context, in *UpdateProductStatusReq, opts ...grpc.CallOption) (*UpdateProductStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductStatusResp)
	err := c.cc.Invoke(ctx, LoanProductService_UpdateProductStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoanProductServiceServer is the server API for LoanProductService service.
// All implementations must embed UnimplementedLoanProductServiceServer
// for forward compatibility.
//
// === 服务定义 ===
type LoanProductServiceServer interface {
	// 产品查询
	GetLoanProduct(context.Context, *GetLoanProductReq) (*GetLoanProductResp, error)
	ListLoanProducts(context.Context, *ListLoanProductsReq) (*ListLoanProductsResp, error)
	// 产品管理
	CreateLoanProduct(context.Context, *CreateLoanProductReq) (*CreateLoanProductResp, error)
	UpdateLoanProduct(context.Context, *UpdateLoanProductReq) (*UpdateLoanProductResp, error)
	DeleteLoanProduct(context.Context, *DeleteLoanProductReq) (*DeleteLoanProductResp, error)
	UpdateProductStatus(context.Context, *UpdateProductStatusReq) (*UpdateProductStatusResp, error)
	mustEmbedUnimplementedLoanProductServiceServer()
}

// UnimplementedLoanProductServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLoanProductServiceServer struct{}

func (UnimplementedLoanProductServiceServer) GetLoanProduct(context.Context, *GetLoanProductReq) (*GetLoanProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoanProduct not implemented")
}
func (UnimplementedLoanProductServiceServer) ListLoanProducts(context.Context, *ListLoanProductsReq) (*ListLoanProductsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoanProducts not implemented")
}
func (UnimplementedLoanProductServiceServer) CreateLoanProduct(context.Context, *CreateLoanProductReq) (*CreateLoanProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoanProduct not implemented")
}
func (UnimplementedLoanProductServiceServer) UpdateLoanProduct(context.Context, *UpdateLoanProductReq) (*UpdateLoanProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLoanProduct not implemented")
}
func (UnimplementedLoanProductServiceServer) DeleteLoanProduct(context.Context, *DeleteLoanProductReq) (*DeleteLoanProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLoanProduct not implemented")
}
func (UnimplementedLoanProductServiceServer) UpdateProductStatus(context.Context, *UpdateProductStatusReq) (*UpdateProductStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductStatus not implemented")
}
func (UnimplementedLoanProductServiceServer) mustEmbedUnimplementedLoanProductServiceServer() {}
func (UnimplementedLoanProductServiceServer) testEmbeddedByValue()                            {}

// UnsafeLoanProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoanProductServiceServer will
// result in compilation errors.
type UnsafeLoanProductServiceServer interface {
	mustEmbedUnimplementedLoanProductServiceServer()
}

func RegisterLoanProductServiceServer(s grpc.ServiceRegistrar, srv LoanProductServiceServer) {
	// If the following call pancis, it indicates UnimplementedLoanProductServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LoanProductService_ServiceDesc, srv)
}

func _LoanProductService_GetLoanProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoanProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanProductServiceServer).GetLoanProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanProductService_GetLoanProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanProductServiceServer).GetLoanProduct(ctx, req.(*GetLoanProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanProductService_ListLoanProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoanProductsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanProductServiceServer).ListLoanProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanProductService_ListLoanProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanProductServiceServer).ListLoanProducts(ctx, req.(*ListLoanProductsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanProductService_CreateLoanProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoanProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanProductServiceServer).CreateLoanProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanProductService_CreateLoanProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanProductServiceServer).CreateLoanProduct(ctx, req.(*CreateLoanProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanProductService_UpdateLoanProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLoanProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanProductServiceServer).UpdateLoanProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanProductService_UpdateLoanProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanProductServiceServer).UpdateLoanProduct(ctx, req.(*UpdateLoanProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanProductService_DeleteLoanProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLoanProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanProductServiceServer).DeleteLoanProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanProductService_DeleteLoanProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanProductServiceServer).DeleteLoanProduct(ctx, req.(*DeleteLoanProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanProductService_UpdateProductStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanProductServiceServer).UpdateProductStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanProductService_UpdateProductStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanProductServiceServer).UpdateProductStatus(ctx, req.(*UpdateProductStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LoanProductService_ServiceDesc is the grpc.ServiceDesc for LoanProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoanProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loanproduct.LoanProductService",
	HandlerType: (*LoanProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLoanProduct",
			Handler:    _LoanProductService_GetLoanProduct_Handler,
		},
		{
			MethodName: "ListLoanProducts",
			Handler:    _LoanProductService_ListLoanProducts_Handler,
		},
		{
			MethodName: "CreateLoanProduct",
			Handler:    _LoanProductService_CreateLoanProduct_Handler,
		},
		{
			MethodName: "UpdateLoanProduct",
			Handler:    _LoanProductService_UpdateLoanProduct_Handler,
		},
		{
			MethodName: "DeleteLoanProduct",
			Handler:    _LoanProductService_DeleteLoanProduct_Handler,
		},
		{
			MethodName: "UpdateProductStatus",
			Handler:    _LoanProductService_UpdateProductStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loanproduct-rpc.proto",
}
