// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	loanApprovalsFieldNames          = builder.RawFieldNames(&LoanApprovals{})
	loanApprovalsRows                = strings.Join(loanApprovalsFieldNames, ",")
	loanApprovalsRowsExpectAutoSet   = strings.Join(stringx.Remove(loanApprovalsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	loanApprovalsRowsWithPlaceHolder = strings.Join(stringx.Remove(loanApprovalsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheLoanApprovalsIdPrefix = "cache:loanApprovals:id:"
)

type (
	loanApprovalsModel interface {
		Insert(ctx context.Context, data *LoanApprovals) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*LoanApprovals, error)
		Update(ctx context.Context, data *LoanApprovals) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultLoanApprovalsModel struct {
		sqlc.CachedConn
		table string
	}

	LoanApprovals struct {
		Id               uint64          `db:"id"`                // 审批ID
		ApplicationId    uint64          `db:"application_id"`    // 申请ID
		AuditorId        uint64          `db:"auditor_id"`        // 审核员ID
		AuditorName      string          `db:"auditor_name"`      // 审核员姓名
		Action           string          `db:"action"`            // 审批动作 approve/reject
		Suggestions      sql.NullString  `db:"suggestions"`       // 审批意见
		ApprovedAmount   sql.NullFloat64 `db:"approved_amount"`   // 批准金额
		ApprovedDuration sql.NullInt64   `db:"approved_duration"` // 批准期限(月)
		InterestRate     sql.NullFloat64 `db:"interest_rate"`     // 利率(%)
		CreatedAt        time.Time       `db:"created_at"`        // 创建时间
	}
)

func newLoanApprovalsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultLoanApprovalsModel {
	return &defaultLoanApprovalsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`loan_approvals`",
	}
}

func (m *defaultLoanApprovalsModel) Delete(ctx context.Context, id uint64) error {
	loanApprovalsIdKey := fmt.Sprintf("%s%v", cacheLoanApprovalsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, loanApprovalsIdKey)
	return err
}

func (m *defaultLoanApprovalsModel) FindOne(ctx context.Context, id uint64) (*LoanApprovals, error) {
	loanApprovalsIdKey := fmt.Sprintf("%s%v", cacheLoanApprovalsIdPrefix, id)
	var resp LoanApprovals
	err := m.QueryRowCtx(ctx, &resp, loanApprovalsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", loanApprovalsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLoanApprovalsModel) Insert(ctx context.Context, data *LoanApprovals) (sql.Result, error) {
	loanApprovalsIdKey := fmt.Sprintf("%s%v", cacheLoanApprovalsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, loanApprovalsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ApplicationId, data.AuditorId, data.AuditorName, data.Action, data.Suggestions, data.ApprovedAmount, data.ApprovedDuration, data.InterestRate)
	}, loanApprovalsIdKey)
	return ret, err
}

func (m *defaultLoanApprovalsModel) Update(ctx context.Context, data *LoanApprovals) error {
	loanApprovalsIdKey := fmt.Sprintf("%s%v", cacheLoanApprovalsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, loanApprovalsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ApplicationId, data.AuditorId, data.AuditorName, data.Action, data.Suggestions, data.ApprovedAmount, data.ApprovedDuration, data.InterestRate, data.Id)
	}, loanApprovalsIdKey)
	return err
}

func (m *defaultLoanApprovalsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheLoanApprovalsIdPrefix, primary)
}

func (m *defaultLoanApprovalsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", loanApprovalsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultLoanApprovalsModel) tableName() string {
	return m.table
}
