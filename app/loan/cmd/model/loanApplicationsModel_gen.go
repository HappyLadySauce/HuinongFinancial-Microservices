// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	loanApplicationsFieldNames          = builder.RawFieldNames(&LoanApplications{})
	loanApplicationsRows                = strings.Join(loanApplicationsFieldNames, ",")
	loanApplicationsRowsExpectAutoSet   = strings.Join(stringx.Remove(loanApplicationsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	loanApplicationsRowsWithPlaceHolder = strings.Join(stringx.Remove(loanApplicationsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheLoanApplicationsIdPrefix            = "cache:loanApplications:id:"
	cacheLoanApplicationsApplicationIdPrefix = "cache:loanApplications:applicationId:"
)

type (
	loanApplicationsModel interface {
		Insert(ctx context.Context, data *LoanApplications) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*LoanApplications, error)
		FindOneByApplicationId(ctx context.Context, applicationId string) (*LoanApplications, error)
		Update(ctx context.Context, data *LoanApplications) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultLoanApplicationsModel struct {
		sqlc.CachedConn
		table string
	}

	LoanApplications struct {
		Id            uint64         `db:"id"`             // 申请ID
		ApplicationId string         `db:"application_id"` // 申请编号
		UserId        uint64         `db:"user_id"`        // 用户ID
		ApplicantName string         `db:"applicant_name"` // 申请人姓名
		ProductId     uint64         `db:"product_id"`     // 贷款产品ID
		Name          string         `db:"name"`           // 申请名称
		Type          string         `db:"type"`           // 贷款类型
		Amount        float64        `db:"amount"`         // 申请金额
		Duration      uint64         `db:"duration"`       // 贷款期限(月)
		Purpose       sql.NullString `db:"purpose"`        // 贷款用途
		Status        string         `db:"status"`         // 状态 pending/approved/rejected/cancelled
		CreatedAt     time.Time      `db:"created_at"`     // 创建时间
		UpdatedAt     time.Time      `db:"updated_at"`     // 更新时间
	}
)

func newLoanApplicationsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultLoanApplicationsModel {
	return &defaultLoanApplicationsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`loan_applications`",
	}
}

func (m *defaultLoanApplicationsModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	loanApplicationsApplicationIdKey := fmt.Sprintf("%s%v", cacheLoanApplicationsApplicationIdPrefix, data.ApplicationId)
	loanApplicationsIdKey := fmt.Sprintf("%s%v", cacheLoanApplicationsIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, loanApplicationsApplicationIdKey, loanApplicationsIdKey)
	return err
}

func (m *defaultLoanApplicationsModel) FindOne(ctx context.Context, id uint64) (*LoanApplications, error) {
	loanApplicationsIdKey := fmt.Sprintf("%s%v", cacheLoanApplicationsIdPrefix, id)
	var resp LoanApplications
	err := m.QueryRowCtx(ctx, &resp, loanApplicationsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", loanApplicationsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLoanApplicationsModel) FindOneByApplicationId(ctx context.Context, applicationId string) (*LoanApplications, error) {
	loanApplicationsApplicationIdKey := fmt.Sprintf("%s%v", cacheLoanApplicationsApplicationIdPrefix, applicationId)
	var resp LoanApplications
	err := m.QueryRowIndexCtx(ctx, &resp, loanApplicationsApplicationIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `application_id` = ? limit 1", loanApplicationsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, applicationId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLoanApplicationsModel) Insert(ctx context.Context, data *LoanApplications) (sql.Result, error) {
	loanApplicationsApplicationIdKey := fmt.Sprintf("%s%v", cacheLoanApplicationsApplicationIdPrefix, data.ApplicationId)
	loanApplicationsIdKey := fmt.Sprintf("%s%v", cacheLoanApplicationsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, loanApplicationsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ApplicationId, data.UserId, data.ApplicantName, data.ProductId, data.Name, data.Type, data.Amount, data.Duration, data.Purpose, data.Status)
	}, loanApplicationsApplicationIdKey, loanApplicationsIdKey)
	return ret, err
}

func (m *defaultLoanApplicationsModel) Update(ctx context.Context, newData *LoanApplications) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	loanApplicationsApplicationIdKey := fmt.Sprintf("%s%v", cacheLoanApplicationsApplicationIdPrefix, data.ApplicationId)
	loanApplicationsIdKey := fmt.Sprintf("%s%v", cacheLoanApplicationsIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, loanApplicationsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.ApplicationId, newData.UserId, newData.ApplicantName, newData.ProductId, newData.Name, newData.Type, newData.Amount, newData.Duration, newData.Purpose, newData.Status, newData.Id)
	}, loanApplicationsApplicationIdKey, loanApplicationsIdKey)
	return err
}

func (m *defaultLoanApplicationsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheLoanApplicationsIdPrefix, primary)
}

func (m *defaultLoanApplicationsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", loanApplicationsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultLoanApplicationsModel) tableName() string {
	return m.table
}
