syntax = "v1"

info (
	title:   "租赁产品API"
	desc:    "提供租赁产品查询和管理功能"
	author:  "Huinong"
	email:   "dev@huinong.com"
	version: "v1.0.0"
)

// 服务架构:
// 用户 -> 前端 -> nginx网关 -> leaseproduct-api -> leaseproduct.rpc -> redis 缓存产品信息 -> 数据库 leaseproduct (MySQL)
//                                                                    -> other.rpc -> redis 缓存其他信息 -> 数据库 other (MySQL)
// API 服务端口:10006
// 无数据库、无缓存 直接调用rpc服务实现
// consul 调用地址:consul.huinong.internal
// rpc 端口:20006
// rpc 服务名:leaseproductrpc.rpc
// 服务职责(调用rpc服务实现):
// 1. 租赁产品信息管理:产品创建、查询、修改、删除
// 2. 产品状态管理:产品上下架状态控制
// 3. 库存状态管理:库存数量查询和可用性检查
// 4. 为C端提供产品查询接口，为B端提供产品管理接口
// -- ----------------------------
// 租赁产品表
// -- ----------------------------
// DROP TABLE IF EXISTS `lease_products`;
// CREATE TABLE `lease_products` (
//   `id` bigint UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '产品ID',
//   `product_code` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '产品编码',
//   `name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '产品名称',
//   `type` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '租赁类型',
//   `machinery` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT '' COMMENT '设备名称',
//   `brand` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT '' COMMENT '品牌',
//   `model` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT '' COMMENT '型号',
//   `daily_rate` decimal(10,2) NOT NULL COMMENT '日租金',
//   `deposit` decimal(10,2) DEFAULT 0.00 COMMENT '押金',
//   `max_duration` int UNSIGNED DEFAULT 365 COMMENT '最大租期(天)',
//   `min_duration` int UNSIGNED DEFAULT 1 COMMENT '最小租期(天)',
//   `description` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '产品描述',
//   `inventory_count` int UNSIGNED DEFAULT 0 COMMENT '库存数量',
//   `available_count` int UNSIGNED DEFAULT 0 COMMENT '可用数量',
//   `status` tinyint UNSIGNED DEFAULT 1 COMMENT '状态 1:上架 2:下架',
//   `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
//   `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
//   PRIMARY KEY (`id`),
//   UNIQUE KEY `uk_product_code` (`product_code`),
//   KEY `idx_type` (`type`),
//   KEY `idx_brand` (`brand`),
//   KEY `idx_status` (`status`)
// ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='租赁产品表';
// ========== 基础数据结构 ==========
type (
	// 租赁产品信息 - 修改名称为LeaseProductInfo以与RPC保持一致
	LeaseProductInfo {
		Id             int64   `json:"id"`
		ProductCode    string  `json:"product_code"`
		Name           string  `json:"name"`
		Type           string  `json:"type"`
		Machinery      string  `json:"machinery"`
		Brand          string  `json:"brand"`
		Model          string  `json:"model"`
		DailyRate      float64 `json:"daily_rate"`
		Deposit        float64 `json:"deposit"`
		MaxDuration    int32   `json:"max_duration"` // 修改为int32与RPC一致
		MinDuration    int32   `json:"min_duration"` // 修改为int32与RPC一致
		Description    string  `json:"description"`
		InventoryCount int32   `json:"inventory_count"` // 修改为int32与RPC一致
		AvailableCount int32   `json:"available_count"` // 修改为int32与RPC一致
		Status         int32   `json:"status"` // 修改为int32与RPC一致
		CreatedAt      int64   `json:"created_at"`
		UpdatedAt      int64   `json:"updated_at"`
	}
	// 标准响应格式
	BaseResp  {}
	// 删除产品响应
	DeleteLeaseProductResp  {}
)

// ========== 请求结构 ==========
type (
	// 查询产品列表
	ListLeaseProductsReq {
		Page    int32  `form:"page,default=1"` // 修改为int32统一分页参数
		Size    int32  `form:"size,default=10"` // 修改为int32统一分页参数
		Type    string `form:"type,optional"`
		Brand   string `form:"brand,optional"`
		Status  int32  `form:"status,optional"`
		Keyword string `form:"keyword,optional"`
	}
	ListLeaseProductsResp {
		List  []LeaseProductInfo `json:"list"` // 修改数据类型名称
		Total int64              `json:"total"`
	}
	// 创建租赁产品
	CreateLeaseProductReq {
		ProductCode    string  `json:"product_code"`
		Name           string  `json:"name"`
		Type           string  `json:"type"`
		Machinery      string  `json:"machinery"`
		Brand          string  `json:"brand"`
		Model          string  `json:"model"`
		DailyRate      float64 `json:"daily_rate"`
		Deposit        float64 `json:"deposit"`
		MaxDuration    int32   `json:"max_duration"`
		MinDuration    int32   `json:"min_duration"`
		Description    string  `json:"description"`
		InventoryCount int32   `json:"inventory_count"`
	}
	CreateLeaseProductResp {
		Data LeaseProductInfo `json:"data"` // 添加数据字段
	}
	// 更新租赁产品
	UpdateLeaseProductReq {
		ProductCode string  `path:"productCode"`
		Name        string  `json:"name"`
		Type        string  `json:"type"`
		Machinery   string  `json:"machinery"`
		Brand       string  `json:"brand"`
		Model       string  `json:"model"`
		DailyRate   float64 `json:"daily_rate"`
		Deposit     float64 `json:"deposit"`
		MaxDuration int32   `json:"max_duration"`
		MinDuration int32   `json:"min_duration"`
		Description string  `json:"description"`
		Status      int32   `json:"status"`
	}
	UpdateLeaseProductResp {
		Data LeaseProductInfo `json:"data"` // 添加数据字段
	}
	// 获取产品详情响应
	GetLeaseProductResp {
		Data LeaseProductInfo `json:"data"` // 添加数据字段
	}
	// 检查库存可用性
	CheckInventoryReq {
		ProductCode string `json:"product_code"`
		Quantity    int32  `json:"quantity"`
		StartDate   string `json:"start_date"`
		EndDate     string `json:"end_date"`
	}
	CheckInventoryResp {
		Available      bool  `json:"available"`
		AvailableCount int32 `json:"available_count"`
	}
	// 健康检查响应
	PingResp {
		Status string `json:"status"`
	}
)

// ========== 健康检查接口 (公开接口) ==========
@server (
	group:  health
	prefix: /
)
service leaseproduct {
	@doc "健康检查"
	@handler Ping
	get /ping returns (PingResp)
}

// ========== C端用户API (公开接口) ==========
@server (
	group:  product
	prefix: /api/v1/leaseproduct
)
service leaseproduct {
	@doc "获取租赁产品列表"
	@handler ListLeaseProducts
	get /products (ListLeaseProductsReq) returns (ListLeaseProductsResp)

	@doc "获取租赁产品详情"
	@handler GetLeaseProduct
	get /products/:productCode returns (GetLeaseProductResp)

	@doc "检查库存可用性"
	@handler CheckInventoryAvailability
	post /products/check-inventory (CheckInventoryReq) returns (CheckInventoryResp)
}

// ========== B端管理API (需要管理员权限) ==========
@server (
	jwt:        Auth
	middleware: AdminAuth
	group:      admin
	prefix:     /api/v1/admin/leaseproduct
)
service leaseproduct {
	@doc "获取所有租赁产品列表"
	@handler ListAllLeaseProducts
	get /products (ListLeaseProductsReq) returns (ListLeaseProductsResp)

	@doc "获取租赁产品详情"
	@handler GetLeaseProductDetail
	get /products/:productCode returns (GetLeaseProductResp)

	@doc "创建租赁产品"
	@handler CreateLeaseProduct
	post /products (CreateLeaseProductReq) returns (CreateLeaseProductResp)

	@doc "更新租赁产品"
	@handler UpdateLeaseProduct
	put /products/:productCode (UpdateLeaseProductReq) returns (UpdateLeaseProductResp)

	@doc "删除租赁产品"
	@handler DeleteLeaseProduct
	delete /products/:productCode returns (DeleteLeaseProductResp)
}

// goctl api go -api *.api -dir ../  -style=goZero
