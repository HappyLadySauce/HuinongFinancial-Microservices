// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: leaseproduct-rpc.proto

package leaseproduct

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LeaseProductService_GetLeaseProduct_FullMethodName            = "/leaseproduct.LeaseProductService/GetLeaseProduct"
	LeaseProductService_ListLeaseProducts_FullMethodName          = "/leaseproduct.LeaseProductService/ListLeaseProducts"
	LeaseProductService_CreateLeaseProduct_FullMethodName         = "/leaseproduct.LeaseProductService/CreateLeaseProduct"
	LeaseProductService_UpdateLeaseProduct_FullMethodName         = "/leaseproduct.LeaseProductService/UpdateLeaseProduct"
	LeaseProductService_DeleteLeaseProduct_FullMethodName         = "/leaseproduct.LeaseProductService/DeleteLeaseProduct"
	LeaseProductService_CheckInventoryAvailability_FullMethodName = "/leaseproduct.LeaseProductService/CheckInventoryAvailability"
)

// LeaseProductServiceClient is the client API for LeaseProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaseProductServiceClient interface {
	// 产品查询
	GetLeaseProduct(ctx context.Context, in *GetLeaseProductReq, opts ...grpc.CallOption) (*GetLeaseProductResp, error)
	ListLeaseProducts(ctx context.Context, in *ListLeaseProductsReq, opts ...grpc.CallOption) (*ListLeaseProductsResp, error)
	// 产品管理
	CreateLeaseProduct(ctx context.Context, in *CreateLeaseProductReq, opts ...grpc.CallOption) (*CreateLeaseProductResp, error)
	UpdateLeaseProduct(ctx context.Context, in *UpdateLeaseProductReq, opts ...grpc.CallOption) (*UpdateLeaseProductResp, error)
	DeleteLeaseProduct(ctx context.Context, in *DeleteLeaseProductReq, opts ...grpc.CallOption) (*DeleteLeaseProductResp, error)
	// 库存检查
	CheckInventoryAvailability(ctx context.Context, in *CheckInventoryAvailabilityReq, opts ...grpc.CallOption) (*CheckInventoryAvailabilityResp, error)
}

type leaseProductServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaseProductServiceClient(cc grpc.ClientConnInterface) LeaseProductServiceClient {
	return &leaseProductServiceClient{cc}
}

func (c *leaseProductServiceClient) GetLeaseProduct(ctx context.Context, in *GetLeaseProductReq, opts ...grpc.CallOption) (*GetLeaseProductResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLeaseProductResp)
	err := c.cc.Invoke(ctx, LeaseProductService_GetLeaseProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaseProductServiceClient) ListLeaseProducts(ctx context.Context, in *ListLeaseProductsReq, opts ...grpc.CallOption) (*ListLeaseProductsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLeaseProductsResp)
	err := c.cc.Invoke(ctx, LeaseProductService_ListLeaseProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaseProductServiceClient) CreateLeaseProduct(ctx context.Context, in *CreateLeaseProductReq, opts ...grpc.CallOption) (*CreateLeaseProductResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLeaseProductResp)
	err := c.cc.Invoke(ctx, LeaseProductService_CreateLeaseProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaseProductServiceClient) UpdateLeaseProduct(ctx context.Context, in *UpdateLeaseProductReq, opts ...grpc.CallOption) (*UpdateLeaseProductResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLeaseProductResp)
	err := c.cc.Invoke(ctx, LeaseProductService_UpdateLeaseProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaseProductServiceClient) DeleteLeaseProduct(ctx context.Context, in *DeleteLeaseProductReq, opts ...grpc.CallOption) (*DeleteLeaseProductResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLeaseProductResp)
	err := c.cc.Invoke(ctx, LeaseProductService_DeleteLeaseProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaseProductServiceClient) CheckInventoryAvailability(ctx context.Context, in *CheckInventoryAvailabilityReq, opts ...grpc.CallOption) (*CheckInventoryAvailabilityResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckInventoryAvailabilityResp)
	err := c.cc.Invoke(ctx, LeaseProductService_CheckInventoryAvailability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaseProductServiceServer is the server API for LeaseProductService service.
// All implementations must embed UnimplementedLeaseProductServiceServer
// for forward compatibility.
type LeaseProductServiceServer interface {
	// 产品查询
	GetLeaseProduct(context.Context, *GetLeaseProductReq) (*GetLeaseProductResp, error)
	ListLeaseProducts(context.Context, *ListLeaseProductsReq) (*ListLeaseProductsResp, error)
	// 产品管理
	CreateLeaseProduct(context.Context, *CreateLeaseProductReq) (*CreateLeaseProductResp, error)
	UpdateLeaseProduct(context.Context, *UpdateLeaseProductReq) (*UpdateLeaseProductResp, error)
	DeleteLeaseProduct(context.Context, *DeleteLeaseProductReq) (*DeleteLeaseProductResp, error)
	// 库存检查
	CheckInventoryAvailability(context.Context, *CheckInventoryAvailabilityReq) (*CheckInventoryAvailabilityResp, error)
	mustEmbedUnimplementedLeaseProductServiceServer()
}

// UnimplementedLeaseProductServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLeaseProductServiceServer struct{}

func (UnimplementedLeaseProductServiceServer) GetLeaseProduct(context.Context, *GetLeaseProductReq) (*GetLeaseProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaseProduct not implemented")
}
func (UnimplementedLeaseProductServiceServer) ListLeaseProducts(context.Context, *ListLeaseProductsReq) (*ListLeaseProductsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLeaseProducts not implemented")
}
func (UnimplementedLeaseProductServiceServer) CreateLeaseProduct(context.Context, *CreateLeaseProductReq) (*CreateLeaseProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLeaseProduct not implemented")
}
func (UnimplementedLeaseProductServiceServer) UpdateLeaseProduct(context.Context, *UpdateLeaseProductReq) (*UpdateLeaseProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLeaseProduct not implemented")
}
func (UnimplementedLeaseProductServiceServer) DeleteLeaseProduct(context.Context, *DeleteLeaseProductReq) (*DeleteLeaseProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLeaseProduct not implemented")
}
func (UnimplementedLeaseProductServiceServer) CheckInventoryAvailability(context.Context, *CheckInventoryAvailabilityReq) (*CheckInventoryAvailabilityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckInventoryAvailability not implemented")
}
func (UnimplementedLeaseProductServiceServer) mustEmbedUnimplementedLeaseProductServiceServer() {}
func (UnimplementedLeaseProductServiceServer) testEmbeddedByValue()                             {}

// UnsafeLeaseProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaseProductServiceServer will
// result in compilation errors.
type UnsafeLeaseProductServiceServer interface {
	mustEmbedUnimplementedLeaseProductServiceServer()
}

func RegisterLeaseProductServiceServer(s grpc.ServiceRegistrar, srv LeaseProductServiceServer) {
	// If the following call pancis, it indicates UnimplementedLeaseProductServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LeaseProductService_ServiceDesc, srv)
}

func _LeaseProductService_GetLeaseProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaseProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaseProductServiceServer).GetLeaseProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaseProductService_GetLeaseProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaseProductServiceServer).GetLeaseProduct(ctx, req.(*GetLeaseProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaseProductService_ListLeaseProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLeaseProductsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaseProductServiceServer).ListLeaseProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaseProductService_ListLeaseProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaseProductServiceServer).ListLeaseProducts(ctx, req.(*ListLeaseProductsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaseProductService_CreateLeaseProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLeaseProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaseProductServiceServer).CreateLeaseProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaseProductService_CreateLeaseProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaseProductServiceServer).CreateLeaseProduct(ctx, req.(*CreateLeaseProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaseProductService_UpdateLeaseProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLeaseProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaseProductServiceServer).UpdateLeaseProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaseProductService_UpdateLeaseProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaseProductServiceServer).UpdateLeaseProduct(ctx, req.(*UpdateLeaseProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaseProductService_DeleteLeaseProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLeaseProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaseProductServiceServer).DeleteLeaseProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaseProductService_DeleteLeaseProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaseProductServiceServer).DeleteLeaseProduct(ctx, req.(*DeleteLeaseProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaseProductService_CheckInventoryAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckInventoryAvailabilityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaseProductServiceServer).CheckInventoryAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaseProductService_CheckInventoryAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaseProductServiceServer).CheckInventoryAvailability(ctx, req.(*CheckInventoryAvailabilityReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LeaseProductService_ServiceDesc is the grpc.ServiceDesc for LeaseProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaseProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "leaseproduct.LeaseProductService",
	HandlerType: (*LeaseProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLeaseProduct",
			Handler:    _LeaseProductService_GetLeaseProduct_Handler,
		},
		{
			MethodName: "ListLeaseProducts",
			Handler:    _LeaseProductService_ListLeaseProducts_Handler,
		},
		{
			MethodName: "CreateLeaseProduct",
			Handler:    _LeaseProductService_CreateLeaseProduct_Handler,
		},
		{
			MethodName: "UpdateLeaseProduct",
			Handler:    _LeaseProductService_UpdateLeaseProduct_Handler,
		},
		{
			MethodName: "DeleteLeaseProduct",
			Handler:    _LeaseProductService_DeleteLeaseProduct_Handler,
		},
		{
			MethodName: "CheckInventoryAvailability",
			Handler:    _LeaseProductService_CheckInventoryAvailability_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "leaseproduct-rpc.proto",
}
