// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: leaseproduct-rpc.proto

package leaseproductservice

import (
	"context"

	"rpc/leaseproduct"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CheckInventoryAvailabilityReq  = leaseproduct.CheckInventoryAvailabilityReq
	CheckInventoryAvailabilityResp = leaseproduct.CheckInventoryAvailabilityResp
	CreateLeaseProductReq          = leaseproduct.CreateLeaseProductReq
	CreateLeaseProductResp         = leaseproduct.CreateLeaseProductResp
	DeleteLeaseProductReq          = leaseproduct.DeleteLeaseProductReq
	DeleteLeaseProductResp         = leaseproduct.DeleteLeaseProductResp
	GetLeaseProductReq             = leaseproduct.GetLeaseProductReq
	GetLeaseProductResp            = leaseproduct.GetLeaseProductResp
	LeaseProductInfo               = leaseproduct.LeaseProductInfo
	ListLeaseProductsReq           = leaseproduct.ListLeaseProductsReq
	ListLeaseProductsResp          = leaseproduct.ListLeaseProductsResp
	UpdateLeaseProductReq          = leaseproduct.UpdateLeaseProductReq
	UpdateLeaseProductResp         = leaseproduct.UpdateLeaseProductResp

	LeaseProductService interface {
		// 产品查询
		GetLeaseProduct(ctx context.Context, in *GetLeaseProductReq, opts ...grpc.CallOption) (*GetLeaseProductResp, error)
		ListLeaseProducts(ctx context.Context, in *ListLeaseProductsReq, opts ...grpc.CallOption) (*ListLeaseProductsResp, error)
		// 产品管理
		CreateLeaseProduct(ctx context.Context, in *CreateLeaseProductReq, opts ...grpc.CallOption) (*CreateLeaseProductResp, error)
		UpdateLeaseProduct(ctx context.Context, in *UpdateLeaseProductReq, opts ...grpc.CallOption) (*UpdateLeaseProductResp, error)
		DeleteLeaseProduct(ctx context.Context, in *DeleteLeaseProductReq, opts ...grpc.CallOption) (*DeleteLeaseProductResp, error)
		// 库存检查
		CheckInventoryAvailability(ctx context.Context, in *CheckInventoryAvailabilityReq, opts ...grpc.CallOption) (*CheckInventoryAvailabilityResp, error)
	}

	defaultLeaseProductService struct {
		cli zrpc.Client
	}
)

func NewLeaseProductService(cli zrpc.Client) LeaseProductService {
	return &defaultLeaseProductService{
		cli: cli,
	}
}

// 产品查询
func (m *defaultLeaseProductService) GetLeaseProduct(ctx context.Context, in *GetLeaseProductReq, opts ...grpc.CallOption) (*GetLeaseProductResp, error) {
	client := leaseproduct.NewLeaseProductServiceClient(m.cli.Conn())
	return client.GetLeaseProduct(ctx, in, opts...)
}

func (m *defaultLeaseProductService) ListLeaseProducts(ctx context.Context, in *ListLeaseProductsReq, opts ...grpc.CallOption) (*ListLeaseProductsResp, error) {
	client := leaseproduct.NewLeaseProductServiceClient(m.cli.Conn())
	return client.ListLeaseProducts(ctx, in, opts...)
}

// 产品管理
func (m *defaultLeaseProductService) CreateLeaseProduct(ctx context.Context, in *CreateLeaseProductReq, opts ...grpc.CallOption) (*CreateLeaseProductResp, error) {
	client := leaseproduct.NewLeaseProductServiceClient(m.cli.Conn())
	return client.CreateLeaseProduct(ctx, in, opts...)
}

func (m *defaultLeaseProductService) UpdateLeaseProduct(ctx context.Context, in *UpdateLeaseProductReq, opts ...grpc.CallOption) (*UpdateLeaseProductResp, error) {
	client := leaseproduct.NewLeaseProductServiceClient(m.cli.Conn())
	return client.UpdateLeaseProduct(ctx, in, opts...)
}

func (m *defaultLeaseProductService) DeleteLeaseProduct(ctx context.Context, in *DeleteLeaseProductReq, opts ...grpc.CallOption) (*DeleteLeaseProductResp, error) {
	client := leaseproduct.NewLeaseProductServiceClient(m.cli.Conn())
	return client.DeleteLeaseProduct(ctx, in, opts...)
}

// 库存检查
func (m *defaultLeaseProductService) CheckInventoryAvailability(ctx context.Context, in *CheckInventoryAvailabilityReq, opts ...grpc.CallOption) (*CheckInventoryAvailabilityResp, error) {
	client := leaseproduct.NewLeaseProductServiceClient(m.cli.Conn())
	return client.CheckInventoryAvailability(ctx, in, opts...)
}
