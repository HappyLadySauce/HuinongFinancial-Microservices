// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	leaseProductsFieldNames          = builder.RawFieldNames(&LeaseProducts{})
	leaseProductsRows                = strings.Join(leaseProductsFieldNames, ",")
	leaseProductsRowsExpectAutoSet   = strings.Join(stringx.Remove(leaseProductsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	leaseProductsRowsWithPlaceHolder = strings.Join(stringx.Remove(leaseProductsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheLeaseProductsIdPrefix          = "cache:leaseProducts:id:"
	cacheLeaseProductsProductCodePrefix = "cache:leaseProducts:productCode:"
)

type (
	leaseProductsModel interface {
		Insert(ctx context.Context, data *LeaseProducts) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*LeaseProducts, error)
		FindOneByProductCode(ctx context.Context, productCode string) (*LeaseProducts, error)
		Update(ctx context.Context, data *LeaseProducts) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultLeaseProductsModel struct {
		sqlc.CachedConn
		table string
	}

	LeaseProducts struct {
		Id             uint64    `db:"id"`              // 产品ID
		ProductCode    string    `db:"product_code"`    // 产品编码
		Name           string    `db:"name"`            // 产品名称
		Type           string    `db:"type"`            // 租赁类型
		Machinery      string    `db:"machinery"`       // 设备名称
		Brand          string    `db:"brand"`           // 品牌
		Model          string    `db:"model"`           // 型号
		DailyRate      float64   `db:"daily_rate"`      // 日租金
		Deposit        float64   `db:"deposit"`         // 押金
		MaxDuration    uint64    `db:"max_duration"`    // 最大租期(天)
		MinDuration    uint64    `db:"min_duration"`    // 最小租期(天)
		Description    string    `db:"description"`     // 产品描述
		InventoryCount uint64    `db:"inventory_count"` // 库存数量
		AvailableCount uint64    `db:"available_count"` // 可用数量
		Status         uint64    `db:"status"`          // 状态 1:上架 2:下架
		CreatedAt      time.Time `db:"created_at"`      // 创建时间
		UpdatedAt      time.Time `db:"updated_at"`      // 更新时间
	}
)

func newLeaseProductsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultLeaseProductsModel {
	return &defaultLeaseProductsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`lease_products`",
	}
}

func (m *defaultLeaseProductsModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	leaseProductsIdKey := fmt.Sprintf("%s%v", cacheLeaseProductsIdPrefix, id)
	leaseProductsProductCodeKey := fmt.Sprintf("%s%v", cacheLeaseProductsProductCodePrefix, data.ProductCode)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, leaseProductsIdKey, leaseProductsProductCodeKey)
	return err
}

func (m *defaultLeaseProductsModel) FindOne(ctx context.Context, id uint64) (*LeaseProducts, error) {
	leaseProductsIdKey := fmt.Sprintf("%s%v", cacheLeaseProductsIdPrefix, id)
	var resp LeaseProducts
	err := m.QueryRowCtx(ctx, &resp, leaseProductsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", leaseProductsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLeaseProductsModel) FindOneByProductCode(ctx context.Context, productCode string) (*LeaseProducts, error) {
	leaseProductsProductCodeKey := fmt.Sprintf("%s%v", cacheLeaseProductsProductCodePrefix, productCode)
	var resp LeaseProducts
	err := m.QueryRowIndexCtx(ctx, &resp, leaseProductsProductCodeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `product_code` = ? limit 1", leaseProductsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, productCode); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLeaseProductsModel) Insert(ctx context.Context, data *LeaseProducts) (sql.Result, error) {
	leaseProductsIdKey := fmt.Sprintf("%s%v", cacheLeaseProductsIdPrefix, data.Id)
	leaseProductsProductCodeKey := fmt.Sprintf("%s%v", cacheLeaseProductsProductCodePrefix, data.ProductCode)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, leaseProductsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ProductCode, data.Name, data.Type, data.Machinery, data.Brand, data.Model, data.DailyRate, data.Deposit, data.MaxDuration, data.MinDuration, data.Description, data.InventoryCount, data.AvailableCount, data.Status)
	}, leaseProductsIdKey, leaseProductsProductCodeKey)
	return ret, err
}

func (m *defaultLeaseProductsModel) Update(ctx context.Context, newData *LeaseProducts) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	leaseProductsIdKey := fmt.Sprintf("%s%v", cacheLeaseProductsIdPrefix, data.Id)
	leaseProductsProductCodeKey := fmt.Sprintf("%s%v", cacheLeaseProductsProductCodePrefix, data.ProductCode)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, leaseProductsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.ProductCode, newData.Name, newData.Type, newData.Machinery, newData.Brand, newData.Model, newData.DailyRate, newData.Deposit, newData.MaxDuration, newData.MinDuration, newData.Description, newData.InventoryCount, newData.AvailableCount, newData.Status, newData.Id)
	}, leaseProductsIdKey, leaseProductsProductCodeKey)
	return err
}

func (m *defaultLeaseProductsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheLeaseProductsIdPrefix, primary)
}

func (m *defaultLeaseProductsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", leaseProductsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultLeaseProductsModel) tableName() string {
	return m.table
}
