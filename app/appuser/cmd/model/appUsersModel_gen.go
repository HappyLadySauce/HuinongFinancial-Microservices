// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	appUsersFieldNames          = builder.RawFieldNames(&AppUsers{})
	appUsersRows                = strings.Join(appUsersFieldNames, ",")
	appUsersRowsExpectAutoSet   = strings.Join(stringx.Remove(appUsersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	appUsersRowsWithPlaceHolder = strings.Join(stringx.Remove(appUsersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheAppUsersIdPrefix    = "cache:appUsers:id:"
	cacheAppUsersPhonePrefix = "cache:appUsers:phone:"
)

type (
	appUsersModel interface {
		Insert(ctx context.Context, data *AppUsers) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*AppUsers, error)
		FindOneByPhone(ctx context.Context, phone string) (*AppUsers, error)
		Update(ctx context.Context, data *AppUsers) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultAppUsersModel struct {
		sqlc.CachedConn
		table string
	}

	AppUsers struct {
		Id         uint64    `db:"id"`         // 用户ID
		Phone      string    `db:"phone"`      // 手机号
		Password   string    `db:"password"`   // 密码哈希
		Name       string    `db:"name"`       // 用户姓名
		Nickname   string    `db:"nickname"`   // 昵称
		Age        uint64    `db:"age"`        // 年龄
		Gender     uint64    `db:"gender"`     // 性别 0:未知 1:男 2:女
		Occupation string    `db:"occupation"` // 职业
		Address    string    `db:"address"`    // 联系地址
		Income     float64   `db:"income"`     // 月收入
		Status     uint64    `db:"status"`     // 状态 1:正常 2:冻结 3:禁用
		CreatedAt  time.Time `db:"created_at"` // 创建时间
		UpdatedAt  time.Time `db:"updated_at"` // 更新时间
	}
)

func newAppUsersModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAppUsersModel {
	return &defaultAppUsersModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`app_users`",
	}
}

func (m *defaultAppUsersModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	appUsersIdKey := fmt.Sprintf("%s%v", cacheAppUsersIdPrefix, id)
	appUsersPhoneKey := fmt.Sprintf("%s%v", cacheAppUsersPhonePrefix, data.Phone)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, appUsersIdKey, appUsersPhoneKey)
	return err
}

func (m *defaultAppUsersModel) FindOne(ctx context.Context, id uint64) (*AppUsers, error) {
	appUsersIdKey := fmt.Sprintf("%s%v", cacheAppUsersIdPrefix, id)
	var resp AppUsers
	err := m.QueryRowCtx(ctx, &resp, appUsersIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", appUsersRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppUsersModel) FindOneByPhone(ctx context.Context, phone string) (*AppUsers, error) {
	appUsersPhoneKey := fmt.Sprintf("%s%v", cacheAppUsersPhonePrefix, phone)
	var resp AppUsers
	err := m.QueryRowIndexCtx(ctx, &resp, appUsersPhoneKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `phone` = ? limit 1", appUsersRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, phone); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppUsersModel) Insert(ctx context.Context, data *AppUsers) (sql.Result, error) {
	appUsersIdKey := fmt.Sprintf("%s%v", cacheAppUsersIdPrefix, data.Id)
	appUsersPhoneKey := fmt.Sprintf("%s%v", cacheAppUsersPhonePrefix, data.Phone)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, appUsersRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Phone, data.Password, data.Name, data.Nickname, data.Age, data.Gender, data.Occupation, data.Address, data.Income, data.Status)
	}, appUsersIdKey, appUsersPhoneKey)
	return ret, err
}

func (m *defaultAppUsersModel) Update(ctx context.Context, newData *AppUsers) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	appUsersIdKey := fmt.Sprintf("%s%v", cacheAppUsersIdPrefix, data.Id)
	appUsersPhoneKey := fmt.Sprintf("%s%v", cacheAppUsersPhonePrefix, data.Phone)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, appUsersRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Phone, newData.Password, newData.Name, newData.Nickname, newData.Age, newData.Gender, newData.Occupation, newData.Address, newData.Income, newData.Status, newData.Id)
	}, appUsersIdKey, appUsersPhoneKey)
	return err
}

func (m *defaultAppUsersModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheAppUsersIdPrefix, primary)
}

func (m *defaultAppUsersModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", appUsersRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAppUsersModel) tableName() string {
	return m.table
}
