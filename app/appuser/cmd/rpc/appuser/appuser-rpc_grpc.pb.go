// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: appuser-rpc.proto

package appuser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AppUser_GetUserByAccount_FullMethodName   = "/appuser.AppUser/GetUserByAccount"
	AppUser_VerifyUserPassword_FullMethodName = "/appuser.AppUser/VerifyUserPassword"
	AppUser_CreateUser_FullMethodName         = "/appuser.AppUser/CreateUser"
	AppUser_GetUserInfo_FullMethodName        = "/appuser.AppUser/GetUserInfo"
	AppUser_UpdateUserProfile_FullMethodName  = "/appuser.AppUser/UpdateUserProfile"
	AppUser_GetUserList_FullMethodName        = "/appuser.AppUser/GetUserList"
	AppUser_UpdateUserStatus_FullMethodName   = "/appuser.AppUser/UpdateUserStatus"
)

// AppUserClient is the client API for AppUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AppUser服务 - App用户管理服务
// 职责：用户信息管理、认证验证
// 数据库：appuser (MySQL)
type AppUserClient interface {
	// 用户认证相关
	GetUserByAccount(ctx context.Context, in *GetUserByAccountReq, opts ...grpc.CallOption) (*AppUserInfo, error)
	VerifyUserPassword(ctx context.Context, in *VerifyUserPasswordReq, opts ...grpc.CallOption) (*VerifyUserPasswordResp, error)
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*AppUserInfo, error)
	// 用户信息管理
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*AppUserInfo, error)
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileReq, opts ...grpc.CallOption) (*AppUserInfo, error)
	GetUserList(ctx context.Context, in *GetUserListReq, opts ...grpc.CallOption) (*GetUserListResp, error)
	UpdateUserStatus(ctx context.Context, in *UpdateUserStatusReq, opts ...grpc.CallOption) (*AppUserInfo, error)
}

type appUserClient struct {
	cc grpc.ClientConnInterface
}

func NewAppUserClient(cc grpc.ClientConnInterface) AppUserClient {
	return &appUserClient{cc}
}

func (c *appUserClient) GetUserByAccount(ctx context.Context, in *GetUserByAccountReq, opts ...grpc.CallOption) (*AppUserInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppUserInfo)
	err := c.cc.Invoke(ctx, AppUser_GetUserByAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserClient) VerifyUserPassword(ctx context.Context, in *VerifyUserPasswordReq, opts ...grpc.CallOption) (*VerifyUserPasswordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyUserPasswordResp)
	err := c.cc.Invoke(ctx, AppUser_VerifyUserPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*AppUserInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppUserInfo)
	err := c.cc.Invoke(ctx, AppUser_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserClient) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*AppUserInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppUserInfo)
	err := c.cc.Invoke(ctx, AppUser_GetUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileReq, opts ...grpc.CallOption) (*AppUserInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppUserInfo)
	err := c.cc.Invoke(ctx, AppUser_UpdateUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserClient) GetUserList(ctx context.Context, in *GetUserListReq, opts ...grpc.CallOption) (*GetUserListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserListResp)
	err := c.cc.Invoke(ctx, AppUser_GetUserList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserClient) UpdateUserStatus(ctx context.Context, in *UpdateUserStatusReq, opts ...grpc.CallOption) (*AppUserInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppUserInfo)
	err := c.cc.Invoke(ctx, AppUser_UpdateUserStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppUserServer is the server API for AppUser service.
// All implementations must embed UnimplementedAppUserServer
// for forward compatibility.
//
// AppUser服务 - App用户管理服务
// 职责：用户信息管理、认证验证
// 数据库：appuser (MySQL)
type AppUserServer interface {
	// 用户认证相关
	GetUserByAccount(context.Context, *GetUserByAccountReq) (*AppUserInfo, error)
	VerifyUserPassword(context.Context, *VerifyUserPasswordReq) (*VerifyUserPasswordResp, error)
	CreateUser(context.Context, *CreateUserReq) (*AppUserInfo, error)
	// 用户信息管理
	GetUserInfo(context.Context, *GetUserInfoReq) (*AppUserInfo, error)
	UpdateUserProfile(context.Context, *UpdateUserProfileReq) (*AppUserInfo, error)
	GetUserList(context.Context, *GetUserListReq) (*GetUserListResp, error)
	UpdateUserStatus(context.Context, *UpdateUserStatusReq) (*AppUserInfo, error)
	mustEmbedUnimplementedAppUserServer()
}

// UnimplementedAppUserServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAppUserServer struct{}

func (UnimplementedAppUserServer) GetUserByAccount(context.Context, *GetUserByAccountReq) (*AppUserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByAccount not implemented")
}
func (UnimplementedAppUserServer) VerifyUserPassword(context.Context, *VerifyUserPasswordReq) (*VerifyUserPasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyUserPassword not implemented")
}
func (UnimplementedAppUserServer) CreateUser(context.Context, *CreateUserReq) (*AppUserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAppUserServer) GetUserInfo(context.Context, *GetUserInfoReq) (*AppUserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedAppUserServer) UpdateUserProfile(context.Context, *UpdateUserProfileReq) (*AppUserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedAppUserServer) GetUserList(context.Context, *GetUserListReq) (*GetUserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
}
func (UnimplementedAppUserServer) UpdateUserStatus(context.Context, *UpdateUserStatusReq) (*AppUserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserStatus not implemented")
}
func (UnimplementedAppUserServer) mustEmbedUnimplementedAppUserServer() {}
func (UnimplementedAppUserServer) testEmbeddedByValue()                 {}

// UnsafeAppUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppUserServer will
// result in compilation errors.
type UnsafeAppUserServer interface {
	mustEmbedUnimplementedAppUserServer()
}

func RegisterAppUserServer(s grpc.ServiceRegistrar, srv AppUserServer) {
	// If the following call pancis, it indicates UnimplementedAppUserServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AppUser_ServiceDesc, srv)
}

func _AppUser_GetUserByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserServer).GetUserByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppUser_GetUserByAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserServer).GetUserByAccount(ctx, req.(*GetUserByAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUser_VerifyUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyUserPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserServer).VerifyUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppUser_VerifyUserPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserServer).VerifyUserPassword(ctx, req.(*VerifyUserPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUser_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppUser_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserServer).CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUser_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppUser_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserServer).GetUserInfo(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUser_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppUser_UpdateUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUser_GetUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserServer).GetUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppUser_GetUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserServer).GetUserList(ctx, req.(*GetUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUser_UpdateUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserServer).UpdateUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppUser_UpdateUserStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserServer).UpdateUserStatus(ctx, req.(*UpdateUserStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AppUser_ServiceDesc is the grpc.ServiceDesc for AppUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appuser.AppUser",
	HandlerType: (*AppUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserByAccount",
			Handler:    _AppUser_GetUserByAccount_Handler,
		},
		{
			MethodName: "VerifyUserPassword",
			Handler:    _AppUser_VerifyUserPassword_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _AppUser_CreateUser_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _AppUser_GetUserInfo_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _AppUser_UpdateUserProfile_Handler,
		},
		{
			MethodName: "GetUserList",
			Handler:    _AppUser_GetUserList_Handler,
		},
		{
			MethodName: "UpdateUserStatus",
			Handler:    _AppUser_UpdateUserStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "appuser-rpc.proto",
}
